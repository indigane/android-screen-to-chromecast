<?xml version='1.0' encoding='utf-8'?>
<documentation><page name="Class BuildConfig" source="org/videolan/BuildConfig.html"><description>public final class BuildConfig</description><fields><field name="boolean" type="static" modifiers="public final">DEBUG</field><field name="String" type="static" modifiers="public final">LIBRARY_PACKAGE_NAME</field><field name="String" type="static" modifiers="public final">BUILD_TYPE</field></fields></page><page name="Package org.videolan" source="org/videolan/package-summary.html" /><page name="Interface AWindow.SurfaceCallback" source="org/videolan/libvlc/AWindow.SurfaceCallback.html"><description>public interface AWindow.SurfaceCallback</description><methods><method name="onSurfacesCreated " returnType="abstract void" signature="( AWindow vout)" /><method name="onSurfacesDestroyed " returnType="abstract void" signature="( AWindow vout)" /></methods><methodDetails><method name="onSurfacesCreated" signature="" /></methodDetails></page><page name="Class AWindow" source="org/videolan/libvlc/AWindow.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IVLCVout public class AWindow implements IVLCVout</description><nestedClasses><nestedClass name="public interface" type="public interface">AWindow.SurfaceCallback</nestedClass></nestedClasses><methods><method name="setVideoView " returnType="void" signature="( SurfaceView videoSurfaceView)">Set a surfaceView used for video out.</method><method name="setVideoView " returnType="void" signature="( TextureView videoTextureView)">Set a TextureView used for video out.</method><method name="setVideoSurface " returnType="void" signature="( Surface videoSurface, SurfaceHolder surfaceHolder)">Set a surface used for video out.</method><method name="setVideoSurface " returnType="void" signature="( SurfaceTexture videoSurfaceTexture)">Set a SurfaceTexture used for video out.</method><method name="setSubtitlesView " returnType="void" signature="( SurfaceView subtitlesSurfaceView)">Set a surfaceView used for subtitles out.</method><method name="setSubtitlesView " returnType="void" signature="( TextureView subtitlesTextureView)">Set a TextureView used for subtitles out.</method><method name="setSubtitlesSurface " returnType="void" signature="( Surface subtitlesSurface, SurfaceHolder surfaceHolder)">Set a surface used for subtitles out.</method><method name="setSubtitlesSurface " returnType="void" signature="( SurfaceTexture subtitlesSurfaceTexture)">Set a SurfaceTexture used for subtitles out.</method><method name="attachViews " returnType="void" signature="( IVLCVout.OnNewVideoLayoutListener onNewVideoLayoutListener)">Attach views with an OnNewVideoLayoutListenerThis must be called afters views are set and before the MediaPlayer is first started.If onNewVideoLayoutListener is not null, the caller will handle the video layout that isneeded by the "android-display" "vout display" module.</method><method name="attachViews " returnType="void" signature="()">Attach views without an OnNewVideoLayoutListener</method><method name="detachViews " returnType="void" signature="()">Detach views previously attached.This will be called automatically when surfaces are destroyed.</method><method name="areViewsAttached " returnType="boolean" signature="()">Return true if views are attached.</method><method name="sendMouseEvent " returnType="void" signature="(int action, int button, int x, int y)">Send a mouse event to the native vout.</method><method name="setWindowSize " returnType="void" signature="(int width, int height)">Send the the window size to the native vout.</method><method name="addCallback " returnType="void" signature="( IVLCVout.Callback callback)">Add a callback to receive onSurfacesCreated and onSurfacesDestroyed events.</method><method name="removeCallback " returnType="void" signature="( IVLCVout.Callback callback)">Remove a callback.</method></methods><methodDetails><method name="setVideoView" signature="">Set a surfaceView used for video out.</method><method name="setVideoView" signature="">Set a TextureView used for video out.</method><method name="setVideoSurface" signature="">Set a surface used for video out.</method><method name="setVideoSurface" signature="">Set a SurfaceTexture used for video out.</method><method name="setSubtitlesView" signature="">Set a surfaceView used for subtitles out.</method><method name="setSubtitlesView" signature="">Set a TextureView used for subtitles out.</method><method name="setSubtitlesSurface" signature="">Set a surface used for subtitles out.</method><method name="setSubtitlesSurface" signature="">Set a SurfaceTexture used for subtitles out.</method><method name="attachViews" signature="">Attach views with an OnNewVideoLayoutListenerThis must be called afters views are set and before the MediaPlayer is first started.If onNewVideoLayoutListener is not null, the caller will handle the video layout that isneeded by the "android-display" "vout display" module. Even if that case, the OpenGL ES2could still be used.If onNewVideoLayoutListener is null, the caller won't handle the video layout that isneeded by the "android-display" "vout display" module. Therefore, only the OpenGL ES2"vout display" module will be used (for hardware and software decoding).</method><method name="attachViews" signature="">Attach views without an OnNewVideoLayoutListener</method><method name="detachViews" signature="">Detach views previously attached.This will be called automatically when surfaces are destroyed.</method><method name="areViewsAttached" signature="">Return true if views are attached. If surfaces were destroyed, this will return false.</method><method name="sendMouseEvent" signature="">Send a mouse event to the native vout.</method><method name="setWindowSize" signature="">Send the the window size to the native vout.</method><method name="addCallback" signature="">Add a callback to receive onSurfacesCreated and onSurfacesDestroyed events.</method></methodDetails></page><page name="Interface Dialog.Callbacks" source="org/videolan/libvlc/Dialog.Callbacks.html"><description>public interface Dialog.Callbacks Dialog Callback, see setCallbacks</description><methods><method name="onDisplay " returnType="abstract void" signature="( Dialog.ErrorMessage dialog)">Call when an error message need to be displayed</method><method name="onDisplay " returnType="abstract void" signature="( Dialog.LoginDialog dialog)">Called when a login dialog need to be displayedCall postLogin to post the answer, orcall dismiss to dismiss the dialog.</method><method name="onDisplay " returnType="abstract void" signature="( Dialog.QuestionDialog dialog)">Called when a question dialog need to be displayedCall postAction to post the answer, orcall dismiss to dismiss the dialog.</method><method name="onDisplay " returnType="abstract void" signature="( Dialog.ProgressDialog dialog)">Called when a progress dialog need to be displayedCall dismiss to dismiss the dialog (if it's cancelable).</method><method name="onCanceled " returnType="abstract void" signature="( Dialog dialog)">Called when a previously displayed dialog need to be canceled</method><method name="onProgressUpdate " returnType="abstract void" signature="( Dialog.ProgressDialog dialog)">Called when a progress dialog needs to be updatedDialog text and position may be updated, call getText and getPosition to get the updated information.</method></methods><methodDetails><method name="onDisplay" signature="">Call when an error message need to be displayed</method><method name="onDisplay" signature="">Called when a login dialog need to be displayedCall postLogin to post the answer, orcall dismiss to dismiss the dialog.</method><method name="onDisplay" signature="">Called when a question dialog need to be displayedCall postAction to post the answer, orcall dismiss to dismiss the dialog.</method><method name="onDisplay" signature="">Called when a progress dialog need to be displayedCall dismiss to dismiss the dialog (if it's cancelable).</method><method name="onCanceled" signature="">Called when a previously displayed dialog need to be canceled</method></methodDetails></page><page name="Class Dialog.ErrorMessage" source="org/videolan/libvlc/Dialog.ErrorMessage.html"><description>public class Dialog.ErrorMessage extends Dialog Error messageUsed to signal an error message to the user</description><methods /></page><page name="Class Dialog.LoginDialog" source="org/videolan/libvlc/Dialog.LoginDialog.html"><description>public class Dialog.LoginDialog extends Dialog.IdDialog Login DialogUsed to ask credentials to the user</description><methods><method name="getDefaultUsername " returnType="String" signature="()">Get the default user name that should be pre-filled</method><method name="asksStore " returnType="boolean" signature="()">Should the dialog ask to the user to store the credentials ?</method><method name="postLogin " returnType="void" signature="( String username, String password, boolean store)">Post an answer</method></methods><methodDetails><method name="getDefaultUsername" signature="">Get the default user name that should be pre-filled</method><method name="asksStore" signature="">Should the dialog ask to the user to store the credentials ?</method></methodDetails></page><page name="Class Dialog.ProgressDialog" source="org/videolan/libvlc/Dialog.ProgressDialog.html"><description>public class Dialog.ProgressDialog extends Dialog.IdDialog Progress DialogUsed to display a progress dialog</description><methods><method name="isIndeterminate " returnType="boolean" signature="()">Return true if the progress dialog is inderterminate</method><method name="isCancelable " returnType="boolean" signature="()">Return true if the progress dialog is cancelable</method><method name="getPosition " returnType="float" signature="()">Get the position of the progress dialog</method><method name="getCancelText " returnType="String" signature="()">Get the text of the cancel button</method></methods><methodDetails><method name="isIndeterminate" signature="">Return true if the progress dialog is inderterminate</method><method name="isCancelable" signature="">Return true if the progress dialog is cancelable</method><method name="getPosition" signature="">Get the position of the progress dialog</method></methodDetails></page><page name="Class Dialog.QuestionDialog" source="org/videolan/libvlc/Dialog.QuestionDialog.html"><description>public class Dialog.QuestionDialog extends Dialog.IdDialog Question dialogUsed to ask a blocking question</description><fields><field name="int" type="static" modifiers="public final">TYPE_NORMAL</field><field name="int" type="static" modifiers="public final">TYPE_WARNING</field><field name="int" type="static" modifiers="public final">TYPE_ERROR</field></fields><methods><method name="getQuestionType " returnType="int" signature="()">Get the type (or severity) of the question dialogSee TYPE_NORMAL , TYPE_WARNING and TYPE_ERROR</method><method name="getCancelText " returnType="String" signature="()">Get the text of the cancel button</method><method name="getAction1Text " returnType="String" signature="()">Get the text of the first button (optional, can be null)</method><method name="getAction2Text " returnType="String" signature="()">Get the text of the second button (optional, can be null)</method><method name="postAction " returnType="void" signature="(int action)">Post an answer</method></methods><methodDetails><method name="getQuestionType" signature="">Get the type (or severity) of the question dialogSee TYPE_NORMAL , TYPE_WARNING and TYPE_ERROR</method><method name="getCancelText" signature="">Get the text of the cancel button</method><method name="getAction1Text" signature="">Get the text of the first button (optional, can be null)</method><method name="getAction2Text" signature="">Get the text of the second button (optional, can be null)</method></methodDetails></page><page name="Class Dialog" source="org/videolan/libvlc/Dialog.html"><description>public abstract class Dialog</description><nestedClasses><nestedClass name="public interface" type="public interface">Dialog.Callbacks</nestedClass><nestedClass name="public class" type="public class">Dialog.ErrorMessage</nestedClass><nestedClass name="public class" type="public class">Dialog.LoginDialog</nestedClass><nestedClass name="public class" type="public class">Dialog.QuestionDialog</nestedClass><nestedClass name="public class" type="public class">Dialog.ProgressDialog</nestedClass></nestedClasses><fields><field name="int" type="static" modifiers="public final">TYPE_ERROR</field><field name="int" type="static" modifiers="public final">TYPE_LOGIN</field><field name="int" type="static" modifiers="public final">TYPE_QUESTION</field><field name="int" type="static" modifiers="public final">TYPE_PROGRESS</field></fields><methods><method name="getType " returnType="int" signature="()">Get the type of the dialogSee TYPE_ERROR , TYPE_LOGIN , TYPE_QUESTION and TYPE_PROGRESS</method><method name="getTitle " returnType="String" signature="()">Get the title of the dialog</method><method name="getText " returnType="String" signature="()">Get the text of the dialog</method><method name="setContext " returnType="void" signature="( Object context)">Associate an object with the dialog</method><method name="getContext " returnType="Object" signature="()">Return the object associated with the dialog</method><method name="dismiss " returnType="void" signature="()">Dismiss the dialog</method><method name="setCallbacks " returnType="static void" signature="( ILibVLC ILibVLC, Dialog.Callbacks callbacks)">Register callbacks in order to handle VLC dialogs</method></methods><methodDetails><method name="getType" signature="">Get the type of the dialogSee TYPE_ERROR , TYPE_LOGIN , TYPE_QUESTION and TYPE_PROGRESS</method><method name="getTitle" signature="">Get the title of the dialog</method><method name="getText" signature="">Get the text of the dialog</method><method name="setContext" signature="">Associate an object with the dialog</method><method name="getContext" signature="">Return the object associated with the dialog</method><method name="dismiss" signature="">Dismiss the dialog</method></methodDetails></page><page name="Class FactoryManager" source="org/videolan/libvlc/FactoryManager.html"><description>public class FactoryManager</description><methods><method name="registerFactory " returnType="static void" signature="( String factoryId, IComponentFactory factory)" /><method name="getFactory " returnType="staticIComponentFactory" signature="( String factoryId)" /></methods><methodDetails><method name="registerFactory" signature="" /></methodDetails></page><page name="Class LibVLC.Event" source="org/videolan/libvlc/LibVLC.Event.html"><description>public class LibVLC.Event extends AbstractVLCEvent</description><methods /></page><page name="Class LibVLC" source="org/videolan/libvlc/LibVLC.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.ILibVLC , org.videolan.libvlc.interfaces.IVLCObject , org.videolan.libvlc.interfaces.IVLCObject public class LibVLC extends VLCObject&lt; ILibVLC.Event &gt; implements ILibVLC</description><nestedClasses><nestedClass name="public class" type="public class">LibVLC.Event</nestedClass></nestedClasses><methods><method name="version " returnType="static nativeString" signature="()">Get the libVLC version</method><method name="majorVersion " returnType="static native int" signature="()">Get the libVLC major version</method><method name="compiler " returnType="static nativeString" signature="()">Get the libVLC compiler</method><method name="changeset " returnType="static nativeString" signature="()">Get the libVLC changeset</method><method name="getAppContext " returnType="Context" signature="()" /><method name="setUserAgent " returnType="void" signature="( String name, String http)">Sets the application name.</method><method name="loadLibraries " returnType="static synchronized void" signature="()" /></methods><methodDetails><method name="version" signature="">Get the libVLC version</method><method name="majorVersion" signature="">Get the libVLC major version</method><method name="compiler" signature="">Get the libVLC compiler</method><method name="changeset" signature="">Get the libVLC changeset</method><method name="getAppContext" signature="" /><method name="setUserAgent" signature="">Sets the application name. LibVLC passes this as the user agent stringwhen a protocol requires it.</method></methodDetails></page><page name="Class LibVLCFactory" source="org/videolan/libvlc/LibVLCFactory.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IComponentFactory , org.videolan.libvlc.interfaces.ILibVLCFactory public class LibVLCFactory implements ILibVLCFactory</description><methods><method name="getFromOptions " returnType="ILibVLC" signature="( Context context, List &lt; String &gt; options)" /><method name="getFromContext " returnType="ILibVLC" signature="( Context context)" /></methods><methodDetails><method name="getFromOptions" signature="" /></methodDetails></page><page name="Class Media" source="org/videolan/libvlc/Media.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IMedia , org.videolan.libvlc.interfaces.IVLCObject , org.videolan.libvlc.interfaces.IVLCObject public class Media extends VLCObject&lt; IMedia.Event &gt; implements IMedia</description><methods><method name="setEventListener " returnType="void" signature="( IMedia.EventListener listener)" /><method name="getUri " returnType="synchronizedUri" signature="()">Get the MRL associated with the Media.</method><method name="getDuration " returnType="long" signature="()">Get the duration of the media.</method><method name="getState " returnType="int" signature="()">Get the state of the media.</method><method name="subItems " returnType="MediaList" signature="()">Get the subItems MediaList associated with the Media.</method><method name="parse " returnType="boolean" signature="(int flags)">Parse the media synchronously with a flag.</method><method name="parse " returnType="boolean" signature="()">Parse the media and local art synchronously.</method><method name="parseAsync " returnType="boolean" signature="(int flags, int timeout)">Parse the media asynchronously with a flag.</method><method name="parseAsync " returnType="boolean" signature="(int flags)" /><method name="parseAsync " returnType="boolean" signature="()">Parse the media and local art asynchronously.</method><method name="isParsed " returnType="synchronized boolean" signature="()">Returns true if the media is parsed This Media should be alive (not released).</method><method name="getType " returnType="int" signature="()">Get the type of the media</method><method name="getTrackCount " returnType="int" signature="()">Get the Track count.</method><method name="getTrack " returnType="IMedia.Track" signature="(int idx)">Get a TrackThe Track can be casted to AudioTrack , VideoTrack or SubtitleTrack in function of the Track.Type .</method><method name="getMeta " returnType="String" signature="(int id)">Get a Meta.</method><method name="getMeta " returnType="String" signature="(int id, boolean force)">Get a Meta.</method><method name="setHWDecoderEnabled " returnType="void" signature="(boolean enabled, boolean force)">Add or remove hw acceleration media options</method><method name="setDefaultMediaPlayerOptions " returnType="void" signature="()">Enable HWDecoder options if not already set</method><method name="addOption " returnType="void" signature="( String option)">Add an option to this Media.</method><method name="addSlave " returnType="void" signature="( IMedia.Slave slave)">Add a slave to the current media.A slave is an external input source that may contains an additional subtitletrack (like a .srt) or an additional audio track (like a .ac3).</method><method name="clearSlaves " returnType="void" signature="()">Clear all slaves previously added by addSlave or internally.</method><method name="getSlaves " returnType="Array&lt;IMedia.Slave&gt;" signature="()">Get a media's slave listThe list will contain slaves parsed by VLC or previously added by addSlave .</method><method name="getStats " returnType="IMedia.Stats" signature="()">Get the stats related to the playing media</method></methods><methodDetails><method name="setEventListener" signature="" /><method name="getUri" signature="">Get the MRL associated with the Media.</method><method name="getDuration" signature="">Get the duration of the media.</method><method name="getState" signature="">Get the state of the media.</method><method name="subItems" signature="">Get the subItems MediaList associated with the Media. This Media should be alive (not released).</method><method name="parse" signature="">Parse the media synchronously with a flag. This Media should be alive (not released).</method><method name="parse" signature="">Parse the media and local art synchronously. This Media should be alive (not released).</method><method name="parseAsync" signature="">Parse the media asynchronously with a flag. This Media should be alive (not released).To track when this is over you can listen to ParsedChanged event (only if this methods returned true).</method><method name="parseAsync" signature="" /><method name="parseAsync" signature="">Parse the media and local art asynchronously. This Media should be alive (not released).</method><method name="isParsed" signature="">Returns true if the media is parsed This Media should be alive (not released).</method><method name="getType" signature="">Get the type of the media</method><method name="getTrackCount" signature="">Get the Track count.</method><method name="getTrack" signature="">Get a TrackThe Track can be casted to AudioTrack , VideoTrack or SubtitleTrack in function of the Track.Type .</method><method name="getMeta" signature="">Get a Meta.</method><method name="getMeta" signature="">Get a Meta.</method><method name="setHWDecoderEnabled" signature="">Add or remove hw acceleration media options</method><method name="setDefaultMediaPlayerOptions" signature="">Enable HWDecoder options if not already set</method><method name="addOption" signature="">Add an option to this Media. This Media should be alive (not released).</method><method name="addSlave" signature="">Add a slave to the current media.A slave is an external input source that may contains an additional subtitletrack (like a .srt) or an additional audio track (like a .ac3).This function must be called before the media is parsed (via parseAsync } orbefore the media is played (via play )</method><method name="clearSlaves" signature="">Clear all slaves previously added by addSlave or internally.</method><method name="getSlaves" signature="">Get a media's slave listThe list will contain slaves parsed by VLC or previously added by addSlave . The typical use case of this function is to savea list of slave in a database for a later use.</method></methodDetails></page><page name="Class MediaDiscoverer.Description.Category" source="org/videolan/libvlc/MediaDiscoverer.Description.Category.html"><description>public class MediaDiscoverer.Description.Category</description><fields><field name="int" type="static" modifiers="public final">Devices</field><field name="int" type="static" modifiers="public final">Lan</field><field name="int" type="static" modifiers="public final">Podcasts</field><field name="int" type="static" modifiers="public final">LocalDirs</field></fields></page><page name="Class MediaDiscoverer.Description" source="org/videolan/libvlc/MediaDiscoverer.Description.html"><description>public class MediaDiscoverer.Description</description><nestedClasses><nestedClass name="public class" type="public class">MediaDiscoverer.Description.Category</nestedClass></nestedClasses><fields><field name="String" type="final" modifiers="public">name</field><field name="String" type="final" modifiers="public">longName</field><field name="int" type="final" modifiers="public">category</field></fields></page><page name="Class MediaDiscoverer.Event" source="org/videolan/libvlc/MediaDiscoverer.Event.html"><description>public class MediaDiscoverer.Event extends AbstractVLCEvent</description><fields><field name="int" type="static" modifiers="public final">Started</field><field name="int" type="static" modifiers="public final">Ended</field></fields><methods /></page><page name="Interface MediaDiscoverer.EventListener" source="org/videolan/libvlc/MediaDiscoverer.EventListener.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.AbstractVLCEvent.Listener public interface MediaDiscoverer.EventListener implements AbstractVLCEvent.Listener &lt; MediaDiscoverer.Event &gt;</description><methods /></page><page name="Class MediaDiscoverer" source="org/videolan/libvlc/MediaDiscoverer.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IVLCObject public class MediaDiscoverer extends VLCObject&lt; MediaDiscoverer.Event &gt;</description><nestedClasses><nestedClass name="public class" type="public class">MediaDiscoverer.Event</nestedClass><nestedClass name="public class" type="public class">MediaDiscoverer.Description</nestedClass><nestedClass name="public interface" type="public interface">MediaDiscoverer.EventListener</nestedClass></nestedClasses><methods><method name="start " returnType="boolean" signature="()">Starts the discovery.</method><method name="stop " returnType="void" signature="()">Stops the discovery.</method><method name="setEventListener " returnType="void" signature="( MediaDiscoverer.EventListener listener)" /><method name="getMediaList " returnType="MediaList" signature="()">Get the MediaList associated with the MediaDiscoverer.This MediaDiscoverer should be alive (not released).</method><method name="list " returnType="staticArray&lt;MediaDiscoverer.Description&gt;" signature="( ILibVLC ILibVLC, int category)">Get media discoverers by category</method></methods><methodDetails><method name="start" signature="">Starts the discovery. This MediaDiscoverer should be alive (not released).</method><method name="stop" signature="">Stops the discovery. This MediaDiscoverer should be alive (not released).(You can also call to stop the discovery directly.</method><method name="setEventListener" signature="" /><method name="getMediaList" signature="">Get the MediaList associated with the MediaDiscoverer.This MediaDiscoverer should be alive (not released).</method></methodDetails></page><page name="Class MediaFactory" source="org/videolan/libvlc/MediaFactory.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IComponentFactory , org.videolan.libvlc.interfaces.IMediaFactory public class MediaFactory implements IMediaFactory</description><methods><method name="getFromLocalPath " returnType="IMedia" signature="( ILibVLC ILibVLC, String path)" /><method name="getFromUri " returnType="IMedia" signature="( ILibVLC ILibVLC, Uri uri)" /><method name="getFromFileDescriptor " returnType="IMedia" signature="( ILibVLC ILibVLC, FileDescriptor fd)" /><method name="getFromAssetFileDescriptor " returnType="IMedia" signature="( ILibVLC ILibVLC, AssetFileDescriptor assetFileDescriptor)" /></methods><methodDetails><method name="getFromLocalPath" signature="" /><method name="getFromUri" signature="" /><method name="getFromFileDescriptor" signature="" /></methodDetails></page><page name="Class MediaList" source="org/videolan/libvlc/MediaList.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IMediaList , org.videolan.libvlc.interfaces.IVLCObject , org.videolan.libvlc.interfaces.IVLCObject public class MediaList extends VLCObject&lt; IMediaList.Event &gt; implements IMediaList</description><methods><method name="setEventListener " returnType="void" signature="( IMediaList.EventListener listener, Handler handler)" /><method name="getCount " returnType="synchronized int" signature="()">Get the number of Media.</method><method name="getMediaAt " returnType="synchronizedIMedia" signature="(int index)">Get a Media at specified index.</method><method name="onReleaseNative " returnType="void" signature="()">Called when native object is released (refcount is 0).This is where you must release native resources.</method><method name="isLocked " returnType="synchronized boolean" signature="()" /></methods><methodDetails><method name="setEventListener" signature="" /><method name="getCount" signature="">Get the number of Media.</method><method name="getMediaAt" signature="">Get a Media at specified index.</method><method name="onReleaseNative" signature="">Called when native object is released (refcount is 0).This is where you must release native resources.</method></methodDetails></page><page name="Class MediaPlayer.Chapter" source="org/videolan/libvlc/MediaPlayer.Chapter.html"><description>public class MediaPlayer.Chapter</description><fields><field name="long" type="final" modifiers="public">timeOffset</field><field name="long" type="final" modifiers="public">duration</field><field name="String" type="final" modifiers="public">name</field></fields></page><page name="Class MediaPlayer.Equalizer" source="org/videolan/libvlc/MediaPlayer.Equalizer.html"><description>public class MediaPlayer.Equalizer</description><methods><method name="create " returnType="staticMediaPlayer.Equalizer" signature="()">Create a new default equalizer, with all frequency values zeroed.</method><method name="createFromPreset " returnType="staticMediaPlayer.Equalizer" signature="(int index)">Create a new equalizer, with initial frequency values copied from an existingpreset.</method><method name="getPresetCount " returnType="static int" signature="()">Get the number of equalizer presets.</method><method name="getPresetName " returnType="staticString" signature="(int index)">Get the name of a particular equalizer preset.This name can be used, for example, to prepare a preset label or menu in a userinterface.</method><method name="getBandCount " returnType="static int" signature="()">Get the number of distinct frequency bands for an equalizer.</method><method name="getBandFrequency " returnType="static float" signature="(int index)">Get a particular equalizer band frequency.This value can be used, for example, to create a label for an equalizer band controlin a user interface.</method><method name="getPreAmp " returnType="float" signature="()">Get the current pre-amplification value from an equalizer.</method><method name="setPreAmp " returnType="boolean" signature="(float preamp)">Set a new pre-amplification value for an equalizer.</method><method name="getAmp " returnType="float" signature="(int index)">Get the amplification value for a particular equalizer frequency band.</method><method name="setAmp " returnType="boolean" signature="(int index, float amp)">Set a new amplification value for a particular equalizer frequency band.</method></methods><methodDetails><method name="create" signature="">Create a new default equalizer, with all frequency values zeroed.The new equalizer can subsequently be applied to a media player by invoking setEqualizer .</method><method name="createFromPreset" signature="">Create a new equalizer, with initial frequency values copied from an existingpreset.The new equalizer can subsequently be applied to a media player by invoking setEqualizer .</method><method name="getPresetCount" signature="">Get the number of equalizer presets.</method><method name="getPresetName" signature="">Get the name of a particular equalizer preset.This name can be used, for example, to prepare a preset label or menu in a userinterface.</method><method name="getBandCount" signature="">Get the number of distinct frequency bands for an equalizer.</method><method name="getBandFrequency" signature="">Get a particular equalizer band frequency.This value can be used, for example, to create a label for an equalizer band controlin a user interface.</method><method name="getPreAmp" signature="">Get the current pre-amplification value from an equalizer.</method><method name="setPreAmp" signature="">Set a new pre-amplification value for an equalizer.The new equalizer settings are subsequently applied to a media player by invoking setEqualizer .The supplied amplification value will be clamped to the -20.0 to +20.0 range.</method><method name="getAmp" signature="">Get the amplification value for a particular equalizer frequency band.</method></methodDetails></page><page name="Class MediaPlayer.Event" source="org/videolan/libvlc/MediaPlayer.Event.html"><description>public class MediaPlayer.Event extends AbstractVLCEvent</description><fields><field name="int" type="static" modifiers="public final">MediaChanged</field><field name="int" type="static" modifiers="public final">Opening</field><field name="int" type="static" modifiers="public final">Buffering</field><field name="int" type="static" modifiers="public final">Playing</field><field name="int" type="static" modifiers="public final">Paused</field><field name="int" type="static" modifiers="public final">Stopped</field><field name="int" type="static" modifiers="public final">EndReached</field><field name="int" type="static" modifiers="public final">EncounteredError</field><field name="int" type="static" modifiers="public final">TimeChanged</field><field name="int" type="static" modifiers="public final">PositionChanged</field><field name="int" type="static" modifiers="public final">SeekableChanged</field><field name="int" type="static" modifiers="public final">PausableChanged</field><field name="int" type="static" modifiers="public final">LengthChanged</field><field name="int" type="static" modifiers="public final">Vout</field><field name="int" type="static" modifiers="public final">ESAdded</field><field name="int" type="static" modifiers="public final">ESDeleted</field><field name="int" type="static" modifiers="public final">ESSelected</field><field name="int" type="static" modifiers="public final">RecordChanged</field></fields><methods><method name="getTimeChanged " returnType="long" signature="()" /><method name="getLengthChanged " returnType="long" signature="()" /><method name="getPositionChanged " returnType="float" signature="()" /><method name="getVoutCount " returnType="int" signature="()" /><method name="getEsChangedType " returnType="int" signature="()" /><method name="getEsChangedID " returnType="int" signature="()" /><method name="getPausable " returnType="boolean" signature="()" /><method name="getSeekable " returnType="boolean" signature="()" /><method name="getBuffering " returnType="float" signature="()" /><method name="getRecording " returnType="boolean" signature="()" /><method name="getRecordPath " returnType="String" signature="()" /></methods><methodDetails><method name="getTimeChanged" signature="" /><method name="getLengthChanged" signature="" /><method name="getPositionChanged" signature="" /><method name="getVoutCount" signature="" /><method name="getEsChangedType" signature="" /><method name="getEsChangedID" signature="" /><method name="getPausable" signature="" /><method name="getSeekable" signature="" /><method name="getBuffering" signature="" /><method name="getRecording" signature="" /></methodDetails></page><page name="Interface MediaPlayer.EventListener" source="org/videolan/libvlc/MediaPlayer.EventListener.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.AbstractVLCEvent.Listener public interface MediaPlayer.EventListener implements AbstractVLCEvent.Listener &lt; MediaPlayer.Event &gt;</description><methods /></page><page name="Class MediaPlayer.Navigate" source="org/videolan/libvlc/MediaPlayer.Navigate.html"><description>public class MediaPlayer.Navigate</description><fields><field name="int" type="static" modifiers="public final">Activate</field><field name="int" type="static" modifiers="public final">Up</field><field name="int" type="static" modifiers="public final">Down</field><field name="int" type="static" modifiers="public final">Left</field><field name="int" type="static" modifiers="public final">Right</field></fields></page><page name="Class MediaPlayer.Position" source="org/videolan/libvlc/MediaPlayer.Position.html"><description>public class MediaPlayer.Position</description><fields><field name="int" type="static" modifiers="public final">Disable</field><field name="int" type="static" modifiers="public final">Center</field><field name="int" type="static" modifiers="public final">Left</field><field name="int" type="static" modifiers="public final">Right</field><field name="int" type="static" modifiers="public final">Top</field><field name="int" type="static" modifiers="public final">TopLeft</field><field name="int" type="static" modifiers="public final">TopRight</field><field name="int" type="static" modifiers="public final">Bottom</field><field name="int" type="static" modifiers="public final">BottomLeft</field><field name="int" type="static" modifiers="public final">BottomRight</field></fields></page><page name="Enum MediaPlayer.ScaleType" source="org/videolan/libvlc/MediaPlayer.ScaleType.html"><description>All Implemented Interfaces: java.io.Serializable , java.lang.Comparable public enum MediaPlayer.ScaleType</description><fields><field name="Float" type="final" modifiers="private">ratio</field></fields><methods><method name="getMainScaleTypes " returnType="staticArray&lt;MediaPlayer.ScaleType&gt;" signature="()" /><method name="values " returnType="staticArray&lt;MediaPlayer.ScaleType&gt;" signature="()" /><method name="valueOf " returnType="staticMediaPlayer.ScaleType" signature="( String name)" /><method name="getRatio " returnType="Float" signature="()" /></methods><methodDetails><method name="getMainScaleTypes" signature="" /><method name="values" signature="" /><method name="valueOf" signature="" /></methodDetails></page><page name="Class MediaPlayer.Title" source="org/videolan/libvlc/MediaPlayer.Title.html"><description>public class MediaPlayer.Title</description><fields><field name="long" type="final" modifiers="public">duration</field><field name="String" type="final" modifiers="public">name</field></fields><methods><method name="isMenu " returnType="boolean" signature="()" /><method name="isInteractive " returnType="boolean" signature="()" /></methods><methodDetails><method name="isMenu" signature="" /></methodDetails></page><page name="Class MediaPlayer.TrackDescription" source="org/videolan/libvlc/MediaPlayer.TrackDescription.html"><description>public class MediaPlayer.TrackDescription</description><fields><field name="int" type="final" modifiers="public">id</field><field name="String" type="final" modifiers="public">name</field></fields></page><page name="Class MediaPlayer" source="org/videolan/libvlc/MediaPlayer.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IVLCObject public class MediaPlayer extends VLCObject&lt; MediaPlayer.Event &gt;</description><nestedClasses><nestedClass name="public class" type="public class">MediaPlayer.Event</nestedClass><nestedClass name="public interface" type="public interface">MediaPlayer.EventListener</nestedClass><nestedClass name="public class" type="public class">MediaPlayer.Position</nestedClass><nestedClass name="public class" type="public class">MediaPlayer.Navigate</nestedClass><nestedClass name="public class" type="public class">MediaPlayer.Title</nestedClass><nestedClass name="public class" type="public class">MediaPlayer.Chapter</nestedClass><nestedClass name="public class" type="public class">MediaPlayer.TrackDescription</nestedClass><nestedClass name="public class" type="public class">MediaPlayer.Equalizer</nestedClass><nestedClass name="public enum" type="public enum">MediaPlayer.ScaleType</nestedClass></nestedClasses><fields><field name="int" type="static" modifiers="public final">SURFACE_SCALES_COUNT</field></fields><methods><method name="getVLCVout " returnType="IVLCVout" signature="()">Get the IVLCVout helper.</method><method name="attachViews " returnType="void" signature="(@ NonNull () VLCVideoLayout surfaceFrame, @ Nullable () DisplayManager dm, boolean subtitles, boolean textureView)">Attach a video layout to the player</method><method name="detachViews " returnType="void" signature="()">Detach the video layout</method><method name="updateVideoSurfaces " returnType="void" signature="()">Update the video surfaces, either to switch from one to another or to resize it</method><method name="setVideoScale " returnType="void" signature="(@ NonNull () MediaPlayer.ScaleType type)">Set the video scale type, by default, scaletype is set to ScaleType.</method><method name="getVideoScale " returnType="MediaPlayer.ScaleType" signature="()">Get the current video scale type</method><method name="setMedia " returnType="void" signature="(@ Nullable () IMedia media)">Set a Media</method><method name="setRenderer " returnType="int" signature="(@ Nullable () RendererItem item)">Set a renderer</method><method name="hasMedia " returnType="synchronized boolean" signature="()">Is a media in use by this MediaPlayer</method><method name="getMedia " returnType="synchronizedIMedia" signature="()">Get the Media used by this MediaPlayer.</method><method name="play " returnType="void" signature="()">Play the media</method><method name="playAsset " returnType="void" signature="(@ NonNull () Context context, @ NonNull () String assetFilename)">Load an asset and starts playback</method><method name="play " returnType="void" signature="(@ NonNull () AssetFileDescriptor afd)">Load an asset and starts playback</method><method name="play " returnType="void" signature="(@ NonNull () String path)">Play a media via its mrl</method><method name="play " returnType="void" signature="(@ NonNull () Uri uri)">Play a media via its Uri</method><method name="play " returnType="void" signature="(@ NonNull () IMedia media)">Starts playback from an already prepared Media</method><method name="stop " returnType="void" signature="()">Stops the playing media</method><method name="setVideoTitleDisplay " returnType="void" signature="(int position, int timeout)">Set if, and how, the video title will be shown when media is played</method><method name="getScale " returnType="float" signature="()">Get the current video scaling factor</method><method name="setScale " returnType="void" signature="(float scale)">Set the video scaling factorThat is the ratio of the number of pixels on screen to the number of pixels in the originaldecoded video in each dimension.</method><method name="getAspectRatio " returnType="String" signature="()">Get current video aspect ratio</method><method name="setAspectRatio " returnType="void" signature="( String aspect)">Set new video aspect ratio.</method><method name="updateViewpoint " returnType="boolean" signature="(float yaw, float pitch, float roll, float fov, boolean absolute)">Update the video viewpoint information</method><method name="setAudioOutput " returnType="synchronized boolean" signature="( String aout)">Selects an audio output module.Any change will take effect only after playback is stopped andrestarted.</method><method name="setAudioDigitalOutputEnabled " returnType="synchronized boolean" signature="(boolean enabled)">Enable or disable Digital OutputWorks only with AudioTrack AudioOutput.</method><method name="forceAudioDigitalEncodings " returnType="synchronized boolean" signature="( Array &lt;int&gt; encodings)">Convenient method for setAudioOutputDevice</method><method name="setUseOrientationFromBounds " returnType="void" signature="( Boolean mUseOrientationFromBounds)" /><method name="useOrientationFromBounds " returnType="Boolean" signature="()" /><method name="setAudioOutputDevice " returnType="boolean" signature="( String id)">Configures an explicit audio output device.Audio output will be moved to the device specified by the device identifier string.Available devices for the "android_audiotrack" module (the default) are"stereo": Up to 2 channels (compat mode)."pcm": Up to 8 channels."encoded": Up to 8 channels, passthrough for every encodings if available."encoded:ENCODING_FLAGS_MASK": passthrough for every encodings specified byENCODING_FLAGS_MASK.</method><method name="getTitles " returnType="Array&lt;MediaPlayer.Title&gt;" signature="()">Get the full description of available titles.</method><method name="getChapters " returnType="Array&lt;MediaPlayer.Chapter&gt;" signature="(int title)">Get the full description of available chapters.</method><method name="getVideoTracksCount " returnType="int" signature="()">Get the number of available video tracks.</method><method name="getVideoTracks " returnType="Array&lt;MediaPlayer.TrackDescription&gt;" signature="()">Get the list of available video tracks.</method><method name="getVideoTrack " returnType="int" signature="()">Get the current video track.</method><method name="setVideoTrack " returnType="boolean" signature="(int index)">Set the video track.</method><method name="setVideoTrackEnabled " returnType="void" signature="(boolean enabled)">Set the enabled state of the video track</method><method name="getCurrentVideoTrack " returnType="IMedia.VideoTrack" signature="()">Get the current video track</method><method name="getAudioTracksCount " returnType="int" signature="()">Get the number of available audio tracks.</method><method name="getAudioTracks " returnType="Array&lt;MediaPlayer.TrackDescription&gt;" signature="()">Get the list of available audio tracks.</method><method name="getAudioTrack " returnType="int" signature="()">Get the current audio track.</method><method name="setAudioTrack " returnType="boolean" signature="(int index)">Set the audio track.</method><method name="getAudioDelay " returnType="long" signature="()">Get the current audio delay.</method><method name="setAudioDelay " returnType="boolean" signature="(long delay)">Set current audio delay.</method><method name="getSpuTracksCount " returnType="int" signature="()">Get the number of available spu (subtitle) tracks.</method><method name="getSpuTracks " returnType="Array&lt;MediaPlayer.TrackDescription&gt;" signature="()">Get the list of available spu (subtitle) tracks.</method><method name="getSpuTrack " returnType="int" signature="()">Get the current spu (subtitle) track.</method><method name="setSpuTrack " returnType="boolean" signature="(int index)">Set the spu (subtitle) track.</method><method name="getSpuDelay " returnType="long" signature="()">Get the current spu (subtitle) delay.</method><method name="setSpuDelay " returnType="boolean" signature="(long delay)">Set current spu (subtitle) delay.</method><method name="setEqualizer " returnType="boolean" signature="( MediaPlayer.Equalizer equalizer)">Apply new equalizer settings to a media player.</method><method name="getTeletext " returnType="int" signature="()">Gets currently selected teletext page.</method><method name="setTeletext " returnType="void" signature="(int page)">Select a teletext page.If telexext was not active, activate teletext.</method><method name="addSlave " returnType="boolean" signature="(int type, Uri uri, boolean select)">Add a slave (or subtitle) to the current media player.</method><method name="record " returnType="boolean" signature="( String directory)">Start/stop recording</method><method name="addSlave " returnType="boolean" signature="(int type, String path, boolean select)">Add a slave (or subtitle) to the current media player.</method><method name="setRate " returnType="native void" signature="(float rate)">Sets the speed of playback (1 being normal speed, 2 being twice as fast)</method><method name="getRate " returnType="native float" signature="()">Get the current playback speed</method><method name="isPlaying " returnType="native boolean" signature="()">Returns true if any media is playing</method><method name="isSeekable " returnType="native boolean" signature="()">Returns true if any media is seekable</method><method name="pause " returnType="native void" signature="()">Pauses any playing media</method><method name="getPlayerState " returnType="native int" signature="()">Get player state.</method><method name="getVolume " returnType="native int" signature="()">Gets volume as integer</method><method name="setVolume " returnType="native int" signature="(int volume)">Sets volume as integer</method><method name="getTime " returnType="native long" signature="()">Gets the current movie time (in ms).</method><method name="setTime " returnType="long" signature="(long time, boolean fast)">Sets the movie time (in ms), if any media is being played.</method><method name="setTime " returnType="long" signature="(long time)" /><method name="getPosition " returnType="native float" signature="()">Gets the movie position.</method><method name="setPosition " returnType="void" signature="(float pos, boolean fast)">Sets the movie position.</method><method name="setPosition " returnType="void" signature="(float pos)" /><method name="getLength " returnType="native long" signature="()">Gets current movie's length in ms.</method><method name="getTitle " returnType="native int" signature="()" /><method name="setTitle " returnType="native void" signature="(int title)" /><method name="getChapter " returnType="native int" signature="()" /><method name="previousChapter " returnType="native int" signature="()" /><method name="nextChapter " returnType="native int" signature="()" /><method name="setChapter " returnType="native void" signature="(int chapter)" /><method name="navigate " returnType="native void" signature="(int navigate)" /><method name="setEventListener " returnType="synchronized void" signature="( MediaPlayer.EventListener listener)" /><method name="canDoPassthrough " returnType="boolean" signature="()" /><method name="nativeSetTime " returnType="native long" signature="(long time, boolean fast)" /><method name="nativeSetPosition " returnType="native void" signature="(float pos, boolean fast)" /></methods><methodDetails><method name="getVLCVout" signature="">Get the IVLCVout helper.</method><method name="attachViews" signature="">Attach a video layout to the player</method><method name="detachViews" signature="">Detach the video layout</method><method name="updateVideoSurfaces" signature="">Update the video surfaces, either to switch from one to another or to resize it</method><method name="setVideoScale" signature="">Set the video scale type, by default, scaletype is set to ScaleType.SURFACE_BEST_FIT</method><method name="getVideoScale" signature="">Get the current video scale type</method><method name="setMedia" signature="">Set a Media</method><method name="setRenderer" signature="">Set a renderer</method><method name="hasMedia" signature="">Is a media in use by this MediaPlayer</method><method name="getMedia" signature="">Get the Media used by this MediaPlayer. This Media should be released with release.</method><method name="play" signature="">Play the media</method><method name="playAsset" signature="">Load an asset and starts playback</method><method name="play" signature="">Load an asset and starts playback</method><method name="play" signature="">Play a media via its mrl</method><method name="play" signature="">Play a media via its Uri</method><method name="play" signature="">Starts playback from an already prepared Media</method><method name="stop" signature="">Stops the playing media</method><method name="setVideoTitleDisplay" signature="">Set if, and how, the video title will be shown when media is played</method><method name="getScale" signature="">Get the current video scaling factor</method><method name="setScale" signature="">Set the video scaling factorThat is the ratio of the number of pixels on screen to the number of pixels in the originaldecoded video in each dimension. Zero is a special value; it will adjust the video to theoutput window/drawable (in windowed mode) or the entire screen.</method><method name="getAspectRatio" signature="">Get current video aspect ratio</method><method name="setAspectRatio" signature="">Set new video aspect ratio.</method><method name="updateViewpoint" signature="">Update the video viewpoint information</method><method name="setAudioOutput" signature="">Selects an audio output module.Any change will take effect only after playback is stopped andrestarted. Audio output cannot be changed while playing.By default, the "android_audiotrack" is selected. Starting Android 21, passthrough isenabled for encodings supported by the device/audio system.Calling this method will disable the encoding detection.</method><method name="setAudioDigitalOutputEnabled" signature="">Enable or disable Digital OutputWorks only with AudioTrack AudioOutput.If setAudioOutputDevice was previously called, this method won't have any effects.</method><method name="forceAudioDigitalEncodings" signature="">Convenient method for setAudioOutputDevice</method><method name="setUseOrientationFromBounds" signature="" /><method name="useOrientationFromBounds" signature="" /><method name="setAudioOutputDevice" signature="">Configures an explicit audio output device.Audio output will be moved to the device specified by the device identifier string.Available devices for the "android_audiotrack" module (the default) are"stereo": Up to 2 channels (compat mode)."pcm": Up to 8 channels."encoded": Up to 8 channels, passthrough for every encodings if available."encoded:ENCODING_FLAGS_MASK": passthrough for every encodings specified byENCODING_FLAGS_MASK. This extra value is a long that contains binary-shiftedAudioFormat.ENCODING_* values.Calling this method will disable the encoding detection (see setAudioOutput and setAudioDigitalOutputEnabled ).</method><method name="getTitles" signature="">Get the full description of available titles.</method><method name="getChapters" signature="">Get the full description of available chapters.</method><method name="getVideoTracksCount" signature="">Get the number of available video tracks.</method><method name="getVideoTracks" signature="">Get the list of available video tracks.</method><method name="getVideoTrack" signature="">Get the current video track.</method><method name="setVideoTrack" signature="">Set the video track.</method><method name="setVideoTrackEnabled" signature="">Set the enabled state of the video track</method><method name="getCurrentVideoTrack" signature="">Get the current video track</method><method name="getAudioTracksCount" signature="">Get the number of available audio tracks.</method><method name="getAudioTracks" signature="">Get the list of available audio tracks.</method><method name="getAudioTrack" signature="">Get the current audio track.</method><method name="setAudioTrack" signature="">Set the audio track.</method><method name="getAudioDelay" signature="">Get the current audio delay.</method><method name="setAudioDelay" signature="">Set current audio delay. The audio delay will be reset to zero each time the media changes.</method><method name="getSpuTracksCount" signature="">Get the number of available spu (subtitle) tracks.</method><method name="getSpuTracks" signature="">Get the list of available spu (subtitle) tracks.</method><method name="getSpuTrack" signature="">Get the current spu (subtitle) track.</method><method name="setSpuTrack" signature="">Set the spu (subtitle) track.</method><method name="getSpuDelay" signature="">Get the current spu (subtitle) delay.</method><method name="setSpuDelay" signature="">Set current spu (subtitle) delay. The spu delay will be reset to zero each time the media changes.</method><method name="setEqualizer" signature="">Apply new equalizer settings to a media player.The equalizer is first created by invoking create or createFromPreset }.It is possible to apply new equalizer settings to a media player whether the mediaplayer is currently playing media or not.Invoking this method will immediately apply the new equalizer settings to the audiooutput of the currently playing media if there is any.If there is no currently playing media, the new equalizer settings will be appliedlater if and when new media is played.Equalizer settings will automatically be applied to subsequently played media.To disable the equalizer for a media player invoke this method passing null.</method><method name="getTeletext" signature="">Gets currently selected teletext page.</method><method name="setTeletext" signature="">Select a teletext page.If telexext was not active, activate teletext.</method><method name="addSlave" signature="">Add a slave (or subtitle) to the current media player.</method><method name="record" signature="">Start/stop recording</method><method name="addSlave" signature="">Add a slave (or subtitle) to the current media player.</method><method name="setRate" signature="">Sets the speed of playback (1 being normal speed, 2 being twice as fast)</method><method name="getRate" signature="">Get the current playback speed</method><method name="isPlaying" signature="">Returns true if any media is playing</method><method name="isSeekable" signature="">Returns true if any media is seekable</method><method name="pause" signature="">Pauses any playing media</method><method name="getPlayerState" signature="">Get player state.</method><method name="getVolume" signature="">Gets volume as integer</method><method name="setVolume" signature="">Sets volume as integer</method><method name="getTime" signature="">Gets the current movie time (in ms).</method><method name="setTime" signature="">Sets the movie time (in ms), if any media is being played.</method><method name="setTime" signature="" /><method name="getPosition" signature="">Gets the movie position.</method><method name="setPosition" signature="">Sets the movie position.</method><method name="setPosition" signature="" /><method name="getLength" signature="">Gets current movie's length in ms.</method><method name="getTitle" signature="" /><method name="setTitle" signature="" /><method name="getChapter" signature="" /><method name="previousChapter" signature="" /><method name="nextChapter" signature="" /><method name="setChapter" signature="" /><method name="navigate" signature="" /><method name="setEventListener" signature="" /><method name="canDoPassthrough" signature="" /><method name="nativeSetTime" signature="" /></methodDetails></page><page name="Class RendererDiscoverer.Description" source="org/videolan/libvlc/RendererDiscoverer.Description.html"><description>public class RendererDiscoverer.Description</description><fields><field name="String" type="final" modifiers="public">name</field></fields></page><page name="Class RendererDiscoverer.Event" source="org/videolan/libvlc/RendererDiscoverer.Event.html"><description>public class RendererDiscoverer.Event extends AbstractVLCEvent</description><fields><field name="int" type="static" modifiers="public final">ItemAdded</field><field name="int" type="static" modifiers="public final">ItemDeleted</field><field name="RendererItem" type="final" modifiers="private">item</field></fields><methods><method name="getItem " returnType="RendererItem" signature="()" /><method name="release " returnType="void" signature="()" /></methods><methodDetails><method name="getItem" signature="" /></methodDetails></page><page name="Interface RendererDiscoverer.EventListener" source="org/videolan/libvlc/RendererDiscoverer.EventListener.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.AbstractVLCEvent.Listener public interface RendererDiscoverer.EventListener implements AbstractVLCEvent.Listener &lt; RendererDiscoverer.Event &gt;</description><methods /></page><page name="Class RendererDiscoverer" source="org/videolan/libvlc/RendererDiscoverer.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IVLCObject public class RendererDiscoverer extends VLCObject&lt; RendererDiscoverer.Event &gt;</description><nestedClasses><nestedClass name="public class" type="public class">RendererDiscoverer.Event</nestedClass><nestedClass name="public interface" type="public interface">RendererDiscoverer.EventListener</nestedClass><nestedClass name="public class" type="public class">RendererDiscoverer.Description</nestedClass></nestedClasses><methods><method name="start " returnType="boolean" signature="()">Starts the discovery.</method><method name="stop " returnType="void" signature="()">Stops the discovery.</method><method name="setEventListener " returnType="void" signature="( RendererDiscoverer.EventListener listener)" /><method name="list " returnType="staticArray&lt;RendererDiscoverer.Description&gt;" signature="( ILibVLC ILibVlc)" /></methods><methodDetails><method name="start" signature="">Starts the discovery. This RendererDiscoverer should be alive (not released).</method><method name="stop" signature="">Stops the discovery. This RendererDiscoverer should be alive (not released).(You can also call to stop the discovery directly.</method><method name="setEventListener" signature="" /></methodDetails></page><page name="Class RendererItem.Event" source="org/videolan/libvlc/RendererItem.Event.html"><description>public class RendererItem.Event extends AbstractVLCEvent</description><methods /></page><page name="Class RendererItem" source="org/videolan/libvlc/RendererItem.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IVLCObject public class RendererItem extends VLCObject&lt; RendererItem.Event &gt;</description><nestedClasses><nestedClass name="public class" type="public class">RendererItem.Event</nestedClass></nestedClasses><fields><field name="int" type="static" modifiers="public final">LIBVLC_RENDERER_CAN_AUDIO</field><field name="int" type="static" modifiers="public final">LIBVLC_RENDERER_CAN_VIDEO</field><field name="String" type="final" modifiers="public">name</field><field name="String" type="final" modifiers="public">displayName</field><field name="String" type="final" modifiers="public">type</field></fields><methods><method name="equals " returnType="boolean" signature="( Object obj)" /></methods><methodDetails /></page><page name="Package org.videolan.libvlc" source="org/videolan/libvlc/package-summary.html" /><page name="Interface AbstractVLCEvent.Listener" source="org/videolan/libvlc/interfaces/AbstractVLCEvent.Listener.html"><description>public interface AbstractVLCEvent.Listener &lt;T extends AbstractVLCEvent &gt; Listener for libvlc events</description><methods><method name="onEvent " returnType="abstract void" signature="( T event)" /></methods><methodDetails /></page><page name="Class AbstractVLCEvent" source="org/videolan/libvlc/interfaces/AbstractVLCEvent.html"><description>public abstract class AbstractVLCEvent</description><nestedClasses><nestedClass name="public interface" type="public interface">AbstractVLCEvent.Listener</nestedClass></nestedClasses><fields><field name="int" type="final" modifiers="public">type</field></fields><methods><method name="release " returnType="void" signature="()" /></methods><methodDetails /></page><page name="Interface IComponentFactory" source="org/videolan/libvlc/interfaces/IComponentFactory.html"><description>public interface IComponentFactory</description></page><page name="Class ILibVLC.Event" source="org/videolan/libvlc/interfaces/ILibVLC.Event.html"><description>public class ILibVLC.Event extends AbstractVLCEvent</description><methods /></page><page name="Interface ILibVLC" source="org/videolan/libvlc/interfaces/ILibVLC.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IVLCObject public interface ILibVLC implements IVLCObject &lt; ILibVLC.Event &gt;</description><nestedClasses><nestedClass name="public class" type="public class">ILibVLC.Event</nestedClass></nestedClasses><methods><method name="getAppContext " returnType="abstractContext" signature="()" /></methods><methodDetails /></page><page name="Interface ILibVLCFactory" source="org/videolan/libvlc/interfaces/ILibVLCFactory.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IComponentFactory public interface ILibVLCFactory implements IComponentFactory</description><methods><method name="getFromOptions " returnType="abstractILibVLC" signature="( Context context, List &lt; String &gt; options)" /><method name="getFromContext " returnType="abstractILibVLC" signature="( Context context)" /></methods><methodDetails><method name="getFromOptions" signature="" /></methodDetails></page><page name="Class IMedia.AudioTrack" source="org/videolan/libvlc/interfaces/IMedia.AudioTrack.html"><description>public class IMedia.AudioTrack extends IMedia.Track see libvlc_audio_track_t</description><fields><field name="int" type="final" modifiers="public">channels</field><field name="int" type="final" modifiers="public">rate</field></fields></page><page name="Class IMedia.Event" source="org/videolan/libvlc/interfaces/IMedia.Event.html"><description>public class IMedia.Event extends AbstractVLCEvent</description><fields><field name="int" type="static" modifiers="public final">MetaChanged</field><field name="int" type="static" modifiers="public final">SubItemAdded</field><field name="int" type="static" modifiers="public final">DurationChanged</field><field name="int" type="static" modifiers="public final">ParsedChanged</field><field name="int" type="static" modifiers="public final">StateChanged</field><field name="int" type="static" modifiers="public final">SubItemTreeAdded</field></fields><methods><method name="getMetaId " returnType="int" signature="()" /><method name="getParsedStatus " returnType="int" signature="()">Get the ParsedStatus in case of ParsedChanged event</method></methods><methodDetails><method name="getMetaId" signature="" /></methodDetails></page><page name="Interface IMedia.EventListener" source="org/videolan/libvlc/interfaces/IMedia.EventListener.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.AbstractVLCEvent.Listener public interface IMedia.EventListener implements AbstractVLCEvent.Listener &lt; IMedia.Event &gt;</description><methods /></page><page name="Class IMedia.Meta" source="org/videolan/libvlc/interfaces/IMedia.Meta.html"><description>public class IMedia.Meta see libvlc_meta_t</description><fields><field name="int" type="static" modifiers="public final">Title</field><field name="int" type="static" modifiers="public final">Artist</field><field name="int" type="static" modifiers="public final">Genre</field><field name="int" type="static" modifiers="public final">Copyright</field><field name="int" type="static" modifiers="public final">Album</field><field name="int" type="static" modifiers="public final">TrackNumber</field><field name="int" type="static" modifiers="public final">Description</field><field name="int" type="static" modifiers="public final">Rating</field><field name="int" type="static" modifiers="public final">Date</field><field name="int" type="static" modifiers="public final">Setting</field><field name="int" type="static" modifiers="public final">URL</field><field name="int" type="static" modifiers="public final">Language</field><field name="int" type="static" modifiers="public final">NowPlaying</field><field name="int" type="static" modifiers="public final">Publisher</field><field name="int" type="static" modifiers="public final">EncodedBy</field><field name="int" type="static" modifiers="public final">ArtworkURL</field><field name="int" type="static" modifiers="public final">TrackID</field><field name="int" type="static" modifiers="public final">TrackTotal</field><field name="int" type="static" modifiers="public final">Director</field><field name="int" type="static" modifiers="public final">Season</field><field name="int" type="static" modifiers="public final">Episode</field><field name="int" type="static" modifiers="public final">ShowName</field><field name="int" type="static" modifiers="public final">Actors</field><field name="int" type="static" modifiers="public final">AlbumArtist</field><field name="int" type="static" modifiers="public final">DiscNumber</field><field name="int" type="static" modifiers="public final">MAX</field></fields></page><page name="Class IMedia.Parse" source="org/videolan/libvlc/interfaces/IMedia.Parse.html"><description>public class IMedia.Parse see libvlc_media_parse_flag_t</description><fields><field name="int" type="static" modifiers="public final">ParseLocal</field><field name="int" type="static" modifiers="public final">ParseNetwork</field><field name="int" type="static" modifiers="public final">FetchLocal</field><field name="int" type="static" modifiers="public final">FetchNetwork</field><field name="int" type="static" modifiers="public final">DoInteract</field></fields></page><page name="Class IMedia.ParsedStatus" source="org/videolan/libvlc/interfaces/IMedia.ParsedStatus.html"><description>public class IMedia.ParsedStatus</description><fields><field name="int" type="static" modifiers="public final">Skipped</field><field name="int" type="static" modifiers="public final">Failed</field><field name="int" type="static" modifiers="public final">Timeout</field><field name="int" type="static" modifiers="public final">Done</field></fields></page><page name="Class IMedia.Slave.Type" source="org/videolan/libvlc/interfaces/IMedia.Slave.Type.html"><description>public class IMedia.Slave.Type</description><fields><field name="int" type="static" modifiers="public final">Subtitle</field><field name="int" type="static" modifiers="public final">Audio</field></fields></page><page name="Class IMedia.Slave" source="org/videolan/libvlc/interfaces/IMedia.Slave.html"><description>public class IMedia.Slave see libvlc_media_slave_t</description><nestedClasses><nestedClass name="public class" type="public class">IMedia.Slave.Type</nestedClass></nestedClasses><fields><field name="int" type="final" modifiers="public">type</field><field name="int" type="final" modifiers="public">priority</field><field name="String" type="final" modifiers="public">uri</field></fields></page><page name="Class IMedia.State" source="org/videolan/libvlc/interfaces/IMedia.State.html"><description>public class IMedia.State see libvlc_state_t</description><fields><field name="int" type="static" modifiers="public final">NothingSpecial</field><field name="int" type="static" modifiers="public final">Opening</field><field name="int" type="static" modifiers="public final">Playing</field><field name="int" type="static" modifiers="public final">Paused</field><field name="int" type="static" modifiers="public final">Stopped</field><field name="int" type="static" modifiers="public final">Ended</field><field name="int" type="static" modifiers="public final">Error</field><field name="int" type="static" modifiers="public final">MAX</field></fields></page><page name="Class IMedia.Stats" source="org/videolan/libvlc/interfaces/IMedia.Stats.html"><description>public class IMedia.Stats see libvlc_media_stats_t</description><fields><field name="int" type="final" modifiers="public">readBytes</field><field name="float" type="final" modifiers="public">inputBitrate</field><field name="int" type="final" modifiers="public">demuxReadBytes</field><field name="float" type="final" modifiers="public">demuxBitrate</field><field name="int" type="final" modifiers="public">demuxCorrupted</field><field name="int" type="final" modifiers="public">demuxDiscontinuity</field><field name="int" type="final" modifiers="public">decodedVideo</field><field name="int" type="final" modifiers="public">decodedAudio</field><field name="int" type="final" modifiers="public">displayedPictures</field><field name="int" type="final" modifiers="public">lostPictures</field><field name="int" type="final" modifiers="public">playedAbuffers</field><field name="int" type="final" modifiers="public">lostAbuffers</field><field name="int" type="final" modifiers="public">sentPackets</field><field name="int" type="final" modifiers="public">sentBytes</field><field name="float" type="final" modifiers="public">sendBitrate</field></fields></page><page name="Class IMedia.SubtitleTrack" source="org/videolan/libvlc/interfaces/IMedia.SubtitleTrack.html"><description>public class IMedia.SubtitleTrack extends IMedia.Track see libvlc_subtitle_track_t</description><fields><field name="String" type="final" modifiers="public">encoding</field></fields></page><page name="Class IMedia.Track.Type" source="org/videolan/libvlc/interfaces/IMedia.Track.Type.html"><description>public class IMedia.Track.Type</description><fields><field name="int" type="static" modifiers="public final">Unknown</field><field name="int" type="static" modifiers="public final">Audio</field><field name="int" type="static" modifiers="public final">Video</field><field name="int" type="static" modifiers="public final">Text</field></fields></page><page name="Class IMedia.Track" source="org/videolan/libvlc/interfaces/IMedia.Track.html"><description>public abstract class IMedia.Track see libvlc_media_track_t</description><nestedClasses><nestedClass name="public class" type="public class">IMedia.Track.Type</nestedClass></nestedClasses><fields><field name="int" type="final" modifiers="public">type</field><field name="String" type="final" modifiers="public">codec</field><field name="String" type="final" modifiers="public">originalCodec</field><field name="int" type="final" modifiers="public">fourcc</field><field name="int" type="final" modifiers="public">id</field><field name="int" type="final" modifiers="public">profile</field><field name="int" type="final" modifiers="public">level</field><field name="int" type="final" modifiers="public">bitrate</field><field name="String" type="final" modifiers="public">language</field><field name="String" type="final" modifiers="public">description</field></fields></page><page name="Class IMedia.Type" source="org/videolan/libvlc/interfaces/IMedia.Type.html"><description>public class IMedia.Type libvlc_media_type_t</description><fields><field name="int" type="static" modifiers="public final">Unknown</field><field name="int" type="static" modifiers="public final">File</field><field name="int" type="static" modifiers="public final">Directory</field><field name="int" type="static" modifiers="public final">Disc</field><field name="int" type="static" modifiers="public final">Stream</field><field name="int" type="static" modifiers="public final">Playlist</field></fields></page><page name="Class IMedia.UnknownTrack" source="org/videolan/libvlc/interfaces/IMedia.UnknownTrack.html"><description>public class IMedia.UnknownTrack extends IMedia.Track see libvlc_subtitle_track_t</description></page><page name="Class IMedia.VideoTrack.Orientation" source="org/videolan/libvlc/interfaces/IMedia.VideoTrack.Orientation.html"><description>public final class IMedia.VideoTrack.Orientation</description><fields><field name="int" type="static" modifiers="public final">TopLeft</field><field name="int" type="static" modifiers="public final">TopRight</field><field name="int" type="static" modifiers="public final">BottomLeft</field><field name="int" type="static" modifiers="public final">BottomRight</field><field name="int" type="static" modifiers="public final">LeftTop</field><field name="int" type="static" modifiers="public final">LeftBottom</field><field name="int" type="static" modifiers="public final">RightTop</field><field name="int" type="static" modifiers="public final">RightBottom</field></fields></page><page name="Class IMedia.VideoTrack.Projection" source="org/videolan/libvlc/interfaces/IMedia.VideoTrack.Projection.html"><description>public final class IMedia.VideoTrack.Projection</description><fields><field name="int" type="static" modifiers="public final">Rectangular</field><field name="int" type="static" modifiers="public final">EquiRectangular</field><field name="int" type="static" modifiers="public final">CubemapLayoutStandard</field></fields></page><page name="Class IMedia.VideoTrack" source="org/videolan/libvlc/interfaces/IMedia.VideoTrack.html"><description>public class IMedia.VideoTrack extends IMedia.Track see libvlc_video_track_t</description><nestedClasses><nestedClass name="public final class" type="public final class">IMedia.VideoTrack.Orientation</nestedClass><nestedClass name="public final class" type="public final class">IMedia.VideoTrack.Projection</nestedClass></nestedClasses><fields><field name="int" type="final" modifiers="public">height</field><field name="int" type="final" modifiers="public">width</field><field name="int" type="final" modifiers="public">sarNum</field><field name="int" type="final" modifiers="public">sarDen</field><field name="int" type="final" modifiers="public">frameRateNum</field><field name="int" type="final" modifiers="public">frameRateDen</field><field name="int" type="final" modifiers="public">orientation</field><field name="int" type="final" modifiers="public">projection</field></fields></page><page name="Interface IMedia" source="org/videolan/libvlc/interfaces/IMedia.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IVLCObject public interface IMedia implements IVLCObject &lt; IMedia.Event &gt;</description><nestedClasses><nestedClass name="public class" type="public class">IMedia.Event</nestedClass><nestedClass name="public interface" type="public interface">IMedia.EventListener</nestedClass><nestedClass name="public class" type="public class">IMedia.Type</nestedClass><nestedClass name="public class" type="public class">IMedia.Meta</nestedClass><nestedClass name="public class" type="public class">IMedia.State</nestedClass><nestedClass name="public class" type="public class">IMedia.Parse</nestedClass><nestedClass name="public class" type="public class">IMedia.ParsedStatus</nestedClass><nestedClass name="public abstract class" type="public abstract class">IMedia.Track</nestedClass><nestedClass name="public class" type="public class">IMedia.AudioTrack</nestedClass><nestedClass name="public class" type="public class">IMedia.VideoTrack</nestedClass><nestedClass name="public class" type="public class">IMedia.SubtitleTrack</nestedClass><nestedClass name="public class" type="public class">IMedia.UnknownTrack</nestedClass><nestedClass name="public class" type="public class">IMedia.Slave</nestedClass><nestedClass name="public class" type="public class">IMedia.Stats</nestedClass></nestedClasses><methods><method name="getDuration " returnType="abstract long" signature="()" /><method name="getState " returnType="abstract int" signature="()" /><method name="subItems " returnType="abstractIMediaList" signature="()" /><method name="parse " returnType="abstract boolean" signature="(int flags)" /><method name="parse " returnType="abstract boolean" signature="()" /><method name="parseAsync " returnType="abstract boolean" signature="(int flags, int timeout)" /><method name="parseAsync " returnType="abstract boolean" signature="(int flags)" /><method name="parseAsync " returnType="abstract boolean" signature="()" /><method name="getType " returnType="abstract int" signature="()" /><method name="getTrackCount " returnType="abstract int" signature="()" /><method name="getTrack " returnType="abstractIMedia.Track" signature="(int idx)" /><method name="getMeta " returnType="abstractString" signature="(int id)" /><method name="getMeta " returnType="abstractString" signature="(int id, boolean force)" /><method name="setHWDecoderEnabled " returnType="abstract void" signature="(boolean enabled, boolean force)" /><method name="setEventListener " returnType="abstract void" signature="( IMedia.EventListener listener)" /><method name="addOption " returnType="abstract void" signature="( String option)" /><method name="addSlave " returnType="abstract void" signature="( IMedia.Slave slave)" /><method name="clearSlaves " returnType="abstract void" signature="()" /><method name="getSlaves " returnType="abstractArray&lt;IMedia.Slave&gt;" signature="()" /><method name="getUri " returnType="abstractUri" signature="()" /><method name="isParsed " returnType="abstract boolean" signature="()" /><method name="getStats " returnType="abstractIMedia.Stats" signature="()" /><method name="setDefaultMediaPlayerOptions " returnType="abstract void" signature="()">Enable HWDecoder options if not already set</method></methods><methodDetails><method name="getDuration" signature="" /><method name="getState" signature="" /><method name="subItems" signature="" /><method name="parse" signature="" /><method name="parse" signature="" /><method name="parseAsync" signature="" /><method name="parseAsync" signature="" /><method name="parseAsync" signature="" /><method name="getType" signature="" /><method name="getTrackCount" signature="" /><method name="getTrack" signature="" /><method name="getMeta" signature="" /><method name="getMeta" signature="" /><method name="setHWDecoderEnabled" signature="" /><method name="setEventListener" signature="" /><method name="addOption" signature="" /><method name="addSlave" signature="" /><method name="clearSlaves" signature="" /><method name="getSlaves" signature="" /><method name="getUri" signature="" /><method name="isParsed" signature="" /><method name="getStats" signature="" /></methodDetails></page><page name="Interface IMediaFactory" source="org/videolan/libvlc/interfaces/IMediaFactory.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IComponentFactory public interface IMediaFactory implements IComponentFactory</description><methods><method name="getFromLocalPath " returnType="abstractIMedia" signature="( ILibVLC ILibVLC, String path)" /><method name="getFromUri " returnType="abstractIMedia" signature="( ILibVLC ILibVLC, Uri uri)" /><method name="getFromFileDescriptor " returnType="abstractIMedia" signature="( ILibVLC ILibVLC, FileDescriptor fd)" /><method name="getFromAssetFileDescriptor " returnType="abstractIMedia" signature="( ILibVLC ILibVLC, AssetFileDescriptor assetFileDescriptor)" /></methods><methodDetails><method name="getFromLocalPath" signature="" /><method name="getFromUri" signature="" /><method name="getFromFileDescriptor" signature="" /></methodDetails></page><page name="Class IMediaList.Event" source="org/videolan/libvlc/interfaces/IMediaList.Event.html"><description>public class IMediaList.Event extends AbstractVLCEvent</description><fields><field name="int" type="static" modifiers="public final">ItemAdded</field><field name="int" type="static" modifiers="public final">ItemDeleted</field><field name="int" type="static" modifiers="public final">EndReached</field><field name="IMedia" type="final" modifiers="public">media</field><field name="int" type="final" modifiers="public">index</field></fields><methods><method name="release " returnType="void" signature="()" /></methods><methodDetails /></page><page name="Interface IMediaList.EventListener" source="org/videolan/libvlc/interfaces/IMediaList.EventListener.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.AbstractVLCEvent.Listener public interface IMediaList.EventListener implements AbstractVLCEvent.Listener &lt; IMediaList.Event &gt;</description><methods /></page><page name="Interface IMediaList" source="org/videolan/libvlc/interfaces/IMediaList.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IVLCObject public interface IMediaList implements IVLCObject &lt; IMediaList.Event &gt;</description><nestedClasses><nestedClass name="public class" type="public class">IMediaList.Event</nestedClass><nestedClass name="public interface" type="public interface">IMediaList.EventListener</nestedClass></nestedClasses><methods><method name="setEventListener " returnType="abstract void" signature="( IMediaList.EventListener listener, Handler handler)" /><method name="getCount " returnType="abstract int" signature="()">Get the number of Media.</method><method name="getMediaAt " returnType="abstractIMedia" signature="(int index)">Get a Media at specified index.</method><method name="isLocked " returnType="abstract boolean" signature="()" /></methods><methodDetails><method name="setEventListener" signature="" /><method name="getCount" signature="">Get the number of Media.</method><method name="getMediaAt" signature="">Get a Media at specified index.</method></methodDetails></page><page name="Interface IVLCObject" source="org/videolan/libvlc/interfaces/IVLCObject.html"><description>public interface IVLCObject &lt;T extends AbstractVLCEvent &gt;</description><methods><method name="retain " returnType="abstract boolean" signature="()" /><method name="release " returnType="abstract void" signature="()" /><method name="isReleased " returnType="abstract boolean" signature="()" /><method name="getLibVLC " returnType="abstractILibVLC" signature="()" /></methods><methodDetails><method name="retain" signature="" /><method name="release" signature="" /><method name="isReleased" signature="" /></methodDetails></page><page name="Interface IVLCVout.Callback" source="org/videolan/libvlc/interfaces/IVLCVout.Callback.html"><description>public interface IVLCVout.Callback</description><methods><method name="onSurfacesCreated " returnType="abstract void" signature="( IVLCVout vlcVout)">This callback is called when surfaces are created.</method><method name="onSurfacesDestroyed " returnType="abstract void" signature="( IVLCVout vlcVout)">This callback is called when surfaces are destroyed.</method></methods><methodDetails><method name="onSurfacesCreated" signature="">This callback is called when surfaces are created.</method></methodDetails></page><page name="Interface IVLCVout.OnNewVideoLayoutListener" source="org/videolan/libvlc/interfaces/IVLCVout.OnNewVideoLayoutListener.html"><description>public interface IVLCVout.OnNewVideoLayoutListener</description><methods><method name="onNewVideoLayout " returnType="abstract void" signature="( IVLCVout vlcVout, int width, int height, int visibleWidth, int visibleHeight, int sarNum, int sarDen)">This listener is called when the "android-display" "vout display" module request a newvideo layout.</method></methods><methodDetails /></page><page name="Interface IVLCVout" source="org/videolan/libvlc/interfaces/IVLCVout.html"><description>public interface IVLCVout</description><nestedClasses><nestedClass name="public interface" type="public interface">IVLCVout.OnNewVideoLayoutListener</nestedClass><nestedClass name="public interface" type="public interface">IVLCVout.Callback</nestedClass></nestedClasses><methods><method name="setVideoView " returnType="abstract void" signature="( SurfaceView videoSurfaceView)">Set a surfaceView used for video out.</method><method name="setVideoView " returnType="abstract void" signature="( TextureView videoTextureView)">Set a TextureView used for video out.</method><method name="setVideoSurface " returnType="abstract void" signature="( Surface videoSurface, SurfaceHolder surfaceHolder)">Set a surface used for video out.</method><method name="setVideoSurface " returnType="abstract void" signature="( SurfaceTexture videoSurfaceTexture)">Set a SurfaceTexture used for video out.</method><method name="setSubtitlesView " returnType="abstract void" signature="( SurfaceView subtitlesSurfaceView)">Set a surfaceView used for subtitles out.</method><method name="setSubtitlesView " returnType="abstract void" signature="( TextureView subtitlesTextureView)">Set a TextureView used for subtitles out.</method><method name="setSubtitlesSurface " returnType="abstract void" signature="( Surface subtitlesSurface, SurfaceHolder surfaceHolder)">Set a surface used for subtitles out.</method><method name="setSubtitlesSurface " returnType="abstract void" signature="( SurfaceTexture subtitlesSurfaceTexture)">Set a SurfaceTexture used for subtitles out.</method><method name="attachViews " returnType="abstract void" signature="( IVLCVout.OnNewVideoLayoutListener onNewVideoLayoutListener)">Attach views with an OnNewVideoLayoutListenerThis must be called afters views are set and before the MediaPlayer is first started.If onNewVideoLayoutListener is not null, the caller will handle the video layout that isneeded by the "android-display" "vout display" module.</method><method name="attachViews " returnType="abstract void" signature="()">Attach views without an OnNewVideoLayoutListener</method><method name="detachViews " returnType="abstract void" signature="()">Detach views previously attached.This will be called automatically when surfaces are destroyed.</method><method name="areViewsAttached " returnType="abstract boolean" signature="()">Return true if views are attached.</method><method name="addCallback " returnType="abstract void" signature="( IVLCVout.Callback callback)">Add a callback to receive onSurfacesCreated and onSurfacesDestroyed events.</method><method name="removeCallback " returnType="abstract void" signature="( IVLCVout.Callback callback)">Remove a callback.</method><method name="sendMouseEvent " returnType="abstract void" signature="(int action, int button, int x, int y)">Send a mouse event to the native vout.</method><method name="setWindowSize " returnType="abstract void" signature="(int width, int height)">Send the the window size to the native vout.</method></methods><methodDetails><method name="setVideoView" signature="">Set a surfaceView used for video out.</method><method name="setVideoView" signature="">Set a TextureView used for video out.</method><method name="setVideoSurface" signature="">Set a surface used for video out.</method><method name="setVideoSurface" signature="">Set a SurfaceTexture used for video out.</method><method name="setSubtitlesView" signature="">Set a surfaceView used for subtitles out.</method><method name="setSubtitlesView" signature="">Set a TextureView used for subtitles out.</method><method name="setSubtitlesSurface" signature="">Set a surface used for subtitles out.</method><method name="setSubtitlesSurface" signature="">Set a SurfaceTexture used for subtitles out.</method><method name="attachViews" signature="">Attach views with an OnNewVideoLayoutListenerThis must be called afters views are set and before the MediaPlayer is first started.If onNewVideoLayoutListener is not null, the caller will handle the video layout that isneeded by the "android-display" "vout display" module. Even if that case, the OpenGL ES2could still be used.If onNewVideoLayoutListener is null, the caller won't handle the video layout that isneeded by the "android-display" "vout display" module. Therefore, only the OpenGL ES2"vout display" module will be used (for hardware and software decoding).</method><method name="attachViews" signature="">Attach views without an OnNewVideoLayoutListener</method><method name="detachViews" signature="">Detach views previously attached.This will be called automatically when surfaces are destroyed.</method><method name="areViewsAttached" signature="">Return true if views are attached. If surfaces were destroyed, this will return false.</method><method name="addCallback" signature="">Add a callback to receive onSurfacesCreated and onSurfacesDestroyed events.</method><method name="removeCallback" signature="">Remove a callback.</method><method name="sendMouseEvent" signature="">Send a mouse event to the native vout.</method></methodDetails></page><page name="Package org.videolan.libvlc.interfaces" source="org/videolan/libvlc/interfaces/package-summary.html" /><page name="Interface MediaPlayer.OnBufferingUpdateListener" source="org/videolan/libvlc/media/MediaPlayer.OnBufferingUpdateListener.html"><description>public interface MediaPlayer.OnBufferingUpdateListener</description><methods><method name="onBufferingUpdate " returnType="abstract void" signature="( MediaPlayer mp, int percent)" /></methods><methodDetails /></page><page name="Interface MediaPlayer.OnCompletionListener" source="org/videolan/libvlc/media/MediaPlayer.OnCompletionListener.html"><description>public interface MediaPlayer.OnCompletionListener</description><methods><method name="onCompletion " returnType="abstract void" signature="( MediaPlayer mp)" /></methods><methodDetails /></page><page name="Interface MediaPlayer.OnErrorListener" source="org/videolan/libvlc/media/MediaPlayer.OnErrorListener.html"><description>public interface MediaPlayer.OnErrorListener</description><methods><method name="onError " returnType="abstract boolean" signature="( MediaPlayer mp, int what, int extra)" /></methods><methodDetails /></page><page name="Interface MediaPlayer.OnInfoListener" source="org/videolan/libvlc/media/MediaPlayer.OnInfoListener.html"><description>public interface MediaPlayer.OnInfoListener</description><methods><method name="onInfo " returnType="abstract boolean" signature="( MediaPlayer mp, int what, int extra)" /></methods><methodDetails /></page><page name="Interface MediaPlayer.OnPreparedListener" source="org/videolan/libvlc/media/MediaPlayer.OnPreparedListener.html"><description>public interface MediaPlayer.OnPreparedListener</description><methods><method name="onPrepared " returnType="abstract void" signature="( MediaPlayer mp)" /></methods><methodDetails /></page><page name="Interface MediaPlayer.OnSeekCompleteListener" source="org/videolan/libvlc/media/MediaPlayer.OnSeekCompleteListener.html"><description>public interface MediaPlayer.OnSeekCompleteListener</description><methods><method name="onSeekComplete " returnType="abstract void" signature="( MediaPlayer mp)" /></methods><methodDetails /></page><page name="Interface MediaPlayer.OnTimedTextListener" source="org/videolan/libvlc/media/MediaPlayer.OnTimedTextListener.html"><description>public interface MediaPlayer.OnTimedTextListener</description><methods><method name="onTimedText " returnType="abstract void" signature="( MediaPlayer mp, TimedText text)" /></methods><methodDetails /></page><page name="Interface MediaPlayer.OnVideoSizeChangedListener" source="org/videolan/libvlc/media/MediaPlayer.OnVideoSizeChangedListener.html"><description>public interface MediaPlayer.OnVideoSizeChangedListener</description><methods><method name="onVideoSizeChanged " returnType="abstract void" signature="( MediaPlayer mp, int width, int height)" /></methods><methodDetails /></page><page name="Class MediaPlayer.TrackInfo" source="org/videolan/libvlc/media/MediaPlayer.TrackInfo.html"><description>All Implemented Interfaces: android.os.Parcelable public class MediaPlayer.TrackInfo implements Parcelable</description><fields><field name="int" type="static" modifiers="public final">MEDIA_TRACK_TYPE_UNKNOWN</field><field name="int" type="static" modifiers="public final">MEDIA_TRACK_TYPE_VIDEO</field><field name="int" type="static" modifiers="public final">MEDIA_TRACK_TYPE_AUDIO</field><field name="int" type="static" modifiers="public final">MEDIA_TRACK_TYPE_TIMEDTEXT</field><field name="int" type="static" modifiers="public final">MEDIA_TRACK_TYPE_SUBTITLE</field></fields><methods><method name="getTrackType " returnType="int" signature="()" /><method name="getLanguage " returnType="String" signature="()" /><method name="getFormat " returnType="MediaFormat" signature="()" /><method name="describeContents " returnType="int" signature="()" /><method name="writeToParcel " returnType="void" signature="( Parcel dest, int flags)" /><method name="toString " returnType="String" signature="()" /></methods><methodDetails><method name="getTrackType" signature="" /><method name="getLanguage" signature="" /><method name="getFormat" signature="" /><method name="describeContents" signature="" /><method name="writeToParcel" signature="" /></methodDetails></page><page name="Class MediaPlayer" source="org/videolan/libvlc/media/MediaPlayer.html"><description>public class MediaPlayer</description><nestedClasses><nestedClass name="public class" type="public class">MediaPlayer.TrackInfo</nestedClass><nestedClass name="public interface" type="public interface">MediaPlayer.OnPreparedListener</nestedClass><nestedClass name="public interface" type="public interface">MediaPlayer.OnCompletionListener</nestedClass><nestedClass name="public interface" type="public interface">MediaPlayer.OnBufferingUpdateListener</nestedClass><nestedClass name="public interface" type="public interface">MediaPlayer.OnSeekCompleteListener</nestedClass><nestedClass name="public interface" type="public interface">MediaPlayer.OnVideoSizeChangedListener</nestedClass><nestedClass name="public interface" type="public interface">MediaPlayer.OnTimedTextListener</nestedClass><nestedClass name="public interface" type="public interface">MediaPlayer.OnErrorListener</nestedClass><nestedClass name="public interface" type="public interface">MediaPlayer.OnInfoListener</nestedClass></nestedClasses><fields><field name="int" type="static" modifiers="public final">MEDIA_ERROR_UNKNOWN</field><field name="int" type="static" modifiers="public final">MEDIA_ERROR_SERVER_DIED</field><field name="int" type="static" modifiers="public final">MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK</field><field name="int" type="static" modifiers="public final">MEDIA_ERROR_IO</field><field name="int" type="static" modifiers="public final">MEDIA_ERROR_MALFORMED</field><field name="int" type="static" modifiers="public final">MEDIA_ERROR_UNSUPPORTED</field><field name="int" type="static" modifiers="public final">MEDIA_ERROR_TIMED_OUT</field><field name="int" type="static" modifiers="public final">MEDIA_INFO_UNKNOWN</field><field name="int" type="static" modifiers="public final">MEDIA_INFO_STARTED_AS_NEXT</field><field name="int" type="static" modifiers="public final">MEDIA_INFO_VIDEO_RENDERING_START</field><field name="int" type="static" modifiers="public final">MEDIA_INFO_VIDEO_TRACK_LAGGING</field><field name="int" type="static" modifiers="public final">MEDIA_INFO_BUFFERING_START</field><field name="int" type="static" modifiers="public final">MEDIA_INFO_BUFFERING_END</field><field name="int" type="static" modifiers="public final">MEDIA_INFO_BAD_INTERLEAVING</field><field name="int" type="static" modifiers="public final">MEDIA_INFO_NOT_SEEKABLE</field><field name="int" type="static" modifiers="public final">MEDIA_INFO_METADATA_UPDATE</field><field name="int" type="static" modifiers="public final">MEDIA_INFO_EXTERNAL_METADATA_UPDATE</field><field name="int" type="static" modifiers="public final">MEDIA_INFO_TIMED_TEXT_ERROR</field><field name="int" type="static" modifiers="public final">MEDIA_INFO_UNSUPPORTED_SUBTITLE</field><field name="int" type="static" modifiers="public final">MEDIA_INFO_SUBTITLE_TIMED_OUT</field><field name="int" type="static" modifiers="public final">VIDEO_SCALING_MODE_SCALE_TO_FIT</field><field name="int" type="static" modifiers="public final">VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING</field><field name="String" type="static" modifiers="public final">MEDIA_MIMETYPE_TEXT_SUBRIP</field></fields><methods><method name="create " returnType="staticMediaPlayer" signature="( Context context, Uri uri)" /><method name="create " returnType="staticMediaPlayer" signature="( Context context, Uri uri, SurfaceHolder holder)" /><method name="create " returnType="staticMediaPlayer" signature="( Context context, Uri uri, SurfaceHolder holder, AudioAttributes audioAttributes, int audioSessionId)" /><method name="create " returnType="staticMediaPlayer" signature="( Context context, int resid)" /><method name="create " returnType="staticMediaPlayer" signature="( Context context, int resid, AudioAttributes audioAttributes, int audioSessionId)" /><method name="setDataSource " returnType="void" signature="( Context context, Uri uri)" /><method name="setDataSource " returnType="void" signature="( Context context, Uri uri, Map &lt; String , String &gt; headers)" /><method name="setDataSource " returnType="void" signature="( String path)" /><method name="setDataSource " returnType="void" signature="( FileDescriptor fd)" /><method name="setDataSource " returnType="void" signature="( FileDescriptor fd, long offset, long length)" /><method name="prepare " returnType="void" signature="()" /><method name="prepareAsync " returnType="void" signature="()" /><method name="setDisplay " returnType="void" signature="( SurfaceHolder sh)" /><method name="setSurface " returnType="void" signature="( Surface surface)" /><method name="setVideoScalingMode " returnType="void" signature="(int mode)" /><method name="start " returnType="void" signature="()" /><method name="stop " returnType="void" signature="()" /><method name="pause " returnType="void" signature="()" /><method name="setWakeMode " returnType="void" signature="( Context context, int mode)" /><method name="setScreenOnWhilePlaying " returnType="void" signature="(boolean screenOn)" /><method name="getVideoWidth " returnType="int" signature="()" /><method name="getVideoHeight " returnType="int" signature="()" /><method name="isPlaying " returnType="boolean" signature="()" /><method name="seekTo " returnType="void" signature="(int msec)" /><method name="getCurrentPosition " returnType="int" signature="()" /><method name="getDuration " returnType="int" signature="()" /><method name="setNextMediaPlayer " returnType="void" signature="( MediaPlayer next)" /><method name="release " returnType="void" signature="()" /><method name="reset " returnType="void" signature="()" /><method name="setAudioStreamType " returnType="void" signature="(int streamtype)" /><method name="setAudioAttributes " returnType="void" signature="( AudioAttributes attributes)" /><method name="setLooping " returnType="void" signature="(boolean looping)" /><method name="isLooping " returnType="boolean" signature="()" /><method name="setVolume " returnType="void" signature="(float leftVolume, float rightVolume)" /><method name="setAudioSessionId " returnType="void" signature="(int sessionId)" /><method name="getAudioSessionId " returnType="int" signature="()" /><method name="attachAuxEffect " returnType="void" signature="(int effectId)" /><method name="setAuxEffectSendLevel " returnType="void" signature="(float level)" /><method name="getTrackInfo " returnType="Array&lt;MediaPlayer.TrackInfo&gt;" signature="()" /><method name="addTimedTextSource " returnType="void" signature="( String path, String mimeType)" /><method name="addTimedTextSource " returnType="void" signature="( Context context, Uri uri, String mimeType)" /><method name="addTimedTextSource " returnType="void" signature="( FileDescriptor fd, String mimeType)" /><method name="addTimedTextSource " returnType="void" signature="( FileDescriptor fd, long offset, long length, String mime)" /><method name="getSelectedTrack " returnType="int" signature="(int trackType)" /><method name="selectTrack " returnType="void" signature="(int index)" /><method name="deselectTrack " returnType="void" signature="(int index)" /><method name="setOnPreparedListener " returnType="void" signature="( MediaPlayer.OnPreparedListener listener)" /><method name="setOnCompletionListener " returnType="void" signature="( MediaPlayer.OnCompletionListener listener)" /><method name="setOnBufferingUpdateListener " returnType="void" signature="( MediaPlayer.OnBufferingUpdateListener listener)" /><method name="setOnSeekCompleteListener " returnType="void" signature="( MediaPlayer.OnSeekCompleteListener listener)" /><method name="setOnVideoSizeChangedListener " returnType="void" signature="( MediaPlayer.OnVideoSizeChangedListener listener)" /><method name="setOnTimedTextListener " returnType="void" signature="( MediaPlayer.OnTimedTextListener listener)" /><method name="setOnErrorListener " returnType="void" signature="( MediaPlayer.OnErrorListener listener)" /><method name="setOnInfoListener " returnType="void" signature="( MediaPlayer.OnInfoListener listener)" /></methods><methodDetails><method name="create" signature="" /><method name="create" signature="" /><method name="create" signature="" /><method name="create" signature="" /><method name="create" signature="" /><method name="setDataSource" signature="" /><method name="setDataSource" signature="" /><method name="setDataSource" signature="" /><method name="setDataSource" signature="" /><method name="setDataSource" signature="" /><method name="prepare" signature="" /><method name="prepareAsync" signature="" /><method name="setDisplay" signature="" /><method name="setSurface" signature="" /><method name="setVideoScalingMode" signature="" /><method name="start" signature="" /><method name="stop" signature="" /><method name="pause" signature="" /><method name="setWakeMode" signature="" /><method name="setScreenOnWhilePlaying" signature="" /><method name="getVideoWidth" signature="" /><method name="getVideoHeight" signature="" /><method name="isPlaying" signature="" /><method name="seekTo" signature="" /><method name="getCurrentPosition" signature="" /><method name="getDuration" signature="" /><method name="setNextMediaPlayer" signature="" /><method name="release" signature="" /><method name="reset" signature="" /><method name="setAudioStreamType" signature="" /><method name="setAudioAttributes" signature="" /><method name="setLooping" signature="" /><method name="isLooping" signature="" /><method name="setVolume" signature="" /><method name="setAudioSessionId" signature="" /><method name="getAudioSessionId" signature="" /><method name="attachAuxEffect" signature="" /><method name="setAuxEffectSendLevel" signature="" /><method name="getTrackInfo" signature="" /><method name="addTimedTextSource" signature="" /><method name="addTimedTextSource" signature="" /><method name="addTimedTextSource" signature="" /><method name="addTimedTextSource" signature="" /><method name="getSelectedTrack" signature="" /><method name="selectTrack" signature="" /><method name="deselectTrack" signature="" /><method name="setOnPreparedListener" signature="" /><method name="setOnCompletionListener" signature="" /><method name="setOnBufferingUpdateListener" signature="" /><method name="setOnSeekCompleteListener" signature="" /><method name="setOnVideoSizeChangedListener" signature="" /><method name="setOnTimedTextListener" signature="" /><method name="setOnErrorListener" signature="" /></methodDetails></page><page name="Class VideoView" source="org/videolan/libvlc/media/VideoView.html"><description>All Implemented Interfaces: android.graphics.drawable.Drawable.Callback , android.view.KeyEvent.Callback , android.view.accessibility.AccessibilityEventSource , android.widget.MediaController.MediaPlayerControl public class VideoView extends SurfaceView implements MediaController.MediaPlayerControl</description><methods><method name="onInitializeAccessibilityEvent " returnType="void" signature="( AccessibilityEvent event)" /><method name="onInitializeAccessibilityNodeInfo " returnType="void" signature="( AccessibilityNodeInfo info)" /><method name="resolveAdjustedSize " returnType="int" signature="(int desiredSize, int measureSpec)" /><method name="setVideoPath " returnType="void" signature="( String path)" /><method name="setVideoURI " returnType="void" signature="( Uri uri)" /><method name="setVideoURI " returnType="void" signature="( Uri uri, Map &lt; String , String &gt; headers)" /><method name="addSubtitleSource " returnType="void" signature="( InputStream is, MediaFormat format)" /><method name="setMediaController " returnType="void" signature="( MediaController controller)" /><method name="setOnPreparedListener " returnType="void" signature="( MediaPlayer.OnPreparedListener l)" /><method name="setOnCompletionListener " returnType="void" signature="( MediaPlayer.OnCompletionListener l)" /><method name="setOnErrorListener " returnType="void" signature="( MediaPlayer.OnErrorListener l)" /><method name="setOnInfoListener " returnType="void" signature="( MediaPlayer.OnInfoListener l)" /><method name="onTouchEvent " returnType="boolean" signature="( MotionEvent ev)" /><method name="onTrackballEvent " returnType="boolean" signature="( MotionEvent ev)" /><method name="onKeyDown " returnType="boolean" signature="(int keyCode, KeyEvent event)" /><method name="start " returnType="void" signature="()" /><method name="pause " returnType="void" signature="()" /><method name="stopPlayback " returnType="void" signature="()" /><method name="suspend " returnType="void" signature="()" /><method name="resume " returnType="void" signature="()" /><method name="getDuration " returnType="int" signature="()" /><method name="getCurrentPosition " returnType="int" signature="()" /><method name="seekTo " returnType="void" signature="(int msec)" /><method name="isPlaying " returnType="boolean" signature="()" /><method name="getBufferPercentage " returnType="int" signature="()" /><method name="canPause " returnType="boolean" signature="()" /><method name="canSeekBackward " returnType="boolean" signature="()" /><method name="canSeekForward " returnType="boolean" signature="()" /><method name="getAudioSessionId " returnType="int" signature="()" /><method name="draw " returnType="void" signature="( Canvas canvas)" /></methods><methodDetails><method name="onInitializeAccessibilityEvent" signature="" /><method name="onInitializeAccessibilityNodeInfo" signature="" /><method name="resolveAdjustedSize" signature="" /><method name="setVideoPath" signature="" /><method name="setVideoURI" signature="" /><method name="setVideoURI" signature="" /><method name="addSubtitleSource" signature="" /><method name="setMediaController" signature="" /><method name="setOnPreparedListener" signature="" /><method name="setOnCompletionListener" signature="" /><method name="setOnErrorListener" signature="" /><method name="setOnInfoListener" signature="" /><method name="onTouchEvent" signature="" /><method name="onTrackballEvent" signature="" /><method name="onKeyDown" signature="" /><method name="start" signature="" /><method name="pause" signature="" /><method name="stopPlayback" signature="" /><method name="suspend" signature="" /><method name="resume" signature="" /><method name="getDuration" signature="" /><method name="getCurrentPosition" signature="" /><method name="seekTo" signature="" /><method name="isPlaying" signature="" /><method name="getBufferPercentage" signature="" /><method name="canPause" signature="" /><method name="canSeekBackward" signature="" /><method name="canSeekForward" signature="" /><method name="getAudioSessionId" signature="" /></methodDetails></page><page name="Package org.videolan.libvlc.media" source="org/videolan/libvlc/media/package-summary.html" /><page name="Class StubLibVLC" source="org/videolan/libvlc/stubs/StubLibVLC.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.ILibVLC , org.videolan.libvlc.interfaces.IVLCObject , org.videolan.libvlc.interfaces.IVLCObject public class StubLibVLC extends StubVLCObject &lt; ILibVLC.Event &gt; implements ILibVLC</description><methods><method name="getAppContext " returnType="Context" signature="()" /></methods><methodDetails /></page><page name="Class StubLibVLCFactory" source="org/videolan/libvlc/stubs/StubLibVLCFactory.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IComponentFactory , org.videolan.libvlc.interfaces.ILibVLCFactory public class StubLibVLCFactory implements ILibVLCFactory</description><methods><method name="getFromOptions " returnType="ILibVLC" signature="( Context context, List &lt; String &gt; options)" /><method name="getFromContext " returnType="ILibVLC" signature="( Context context)" /></methods><methodDetails><method name="getFromOptions" signature="" /></methodDetails></page><page name="Class StubMedia" source="org/videolan/libvlc/stubs/StubMedia.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IMedia , org.videolan.libvlc.interfaces.IVLCObject , org.videolan.libvlc.interfaces.IVLCObject public class StubMedia extends StubVLCObject &lt; IMedia.Event &gt; implements IMedia</description><methods><method name="getDuration " returnType="long" signature="()" /><method name="getState " returnType="int" signature="()" /><method name="subItems " returnType="IMediaList" signature="()" /><method name="parse " returnType="boolean" signature="(int flags)" /><method name="parse " returnType="boolean" signature="()" /><method name="parseAsync " returnType="boolean" signature="(int flags, int timeout)" /><method name="parseAsync " returnType="boolean" signature="(int flags)" /><method name="parseAsync " returnType="boolean" signature="()" /><method name="getType " returnType="int" signature="()" /><method name="getTrackCount " returnType="int" signature="()" /><method name="getTrack " returnType="IMedia.Track" signature="(int idx)" /><method name="getMeta " returnType="String" signature="(int id)" /><method name="getMeta " returnType="String" signature="(int id, boolean force)" /><method name="setHWDecoderEnabled " returnType="void" signature="(boolean enabled, boolean force)" /><method name="setEventListener " returnType="void" signature="( IMedia.EventListener listener)" /><method name="addOption " returnType="void" signature="( String option)" /><method name="addSlave " returnType="void" signature="( IMedia.Slave slave)" /><method name="clearSlaves " returnType="void" signature="()" /><method name="getSlaves " returnType="Array&lt;IMedia.Slave&gt;" signature="()" /><method name="getUri " returnType="Uri" signature="()" /><method name="isParsed " returnType="boolean" signature="()" /><method name="getStats " returnType="IMedia.Stats" signature="()" /><method name="setDefaultMediaPlayerOptions " returnType="void" signature="()">Enable HWDecoder options if not already set</method><method name="retain " returnType="boolean" signature="()" /><method name="release " returnType="void" signature="()" /><method name="isReleased " returnType="boolean" signature="()" /><method name="getLibVLC " returnType="ILibVLC" signature="()" /><method name="setType " returnType="void" signature="(int type)" /></methods><methodDetails><method name="getDuration" signature="" /><method name="getState" signature="" /><method name="subItems" signature="" /><method name="parse" signature="" /><method name="parse" signature="" /><method name="parseAsync" signature="" /><method name="parseAsync" signature="" /><method name="parseAsync" signature="" /><method name="getType" signature="" /><method name="getTrackCount" signature="" /><method name="getTrack" signature="" /><method name="getMeta" signature="" /><method name="getMeta" signature="" /><method name="setHWDecoderEnabled" signature="" /><method name="setEventListener" signature="" /><method name="addOption" signature="" /><method name="addSlave" signature="" /><method name="clearSlaves" signature="" /><method name="getSlaves" signature="" /><method name="getUri" signature="" /><method name="isParsed" signature="" /><method name="getStats" signature="" /><method name="setDefaultMediaPlayerOptions" signature="">Enable HWDecoder options if not already set</method><method name="retain" signature="" /><method name="release" signature="" /><method name="isReleased" signature="" /><method name="getLibVLC" signature="" /></methodDetails></page><page name="Class StubMediaFactory" source="org/videolan/libvlc/stubs/StubMediaFactory.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IComponentFactory , org.videolan.libvlc.interfaces.IMediaFactory public class StubMediaFactory implements IMediaFactory</description><methods><method name="getFromLocalPath " returnType="IMedia" signature="( ILibVLC ILibVLC, String path)" /><method name="getFromUri " returnType="IMedia" signature="( ILibVLC ILibVLC, Uri uri)" /><method name="getFromFileDescriptor " returnType="IMedia" signature="( ILibVLC ILibVLC, FileDescriptor fd)" /><method name="getFromAssetFileDescriptor " returnType="IMedia" signature="( ILibVLC ILibVLC, AssetFileDescriptor assetFileDescriptor)" /></methods><methodDetails><method name="getFromLocalPath" signature="" /><method name="getFromUri" signature="" /><method name="getFromFileDescriptor" signature="" /></methodDetails></page><page name="Class StubMediaList" source="org/videolan/libvlc/stubs/StubMediaList.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IMediaList , org.videolan.libvlc.interfaces.IVLCObject , org.videolan.libvlc.interfaces.IVLCObject public class StubMediaList extends StubVLCObject &lt; IMediaList.Event &gt; implements IMediaList</description><methods><method name="setEventListener " returnType="void" signature="( IMediaList.EventListener listener, Handler handler)" /><method name="getCount " returnType="int" signature="()">Get the number of Media.</method><method name="getMediaAt " returnType="IMedia" signature="(int index)">Get a Media at specified index.</method><method name="isLocked " returnType="boolean" signature="()" /></methods><methodDetails><method name="setEventListener" signature="" /><method name="getCount" signature="">Get the number of Media.</method><method name="getMediaAt" signature="">Get a Media at specified index.</method></methodDetails></page><page name="Class StubVLCObject" source="org/videolan/libvlc/stubs/StubVLCObject.html"><description>All Implemented Interfaces: org.videolan.libvlc.interfaces.IVLCObject public class StubVLCObject &lt;T extends AbstractVLCEvent &gt; implements IVLCObject &lt; T &gt;</description><methods><method name="retain " returnType="boolean" signature="()" /><method name="release " returnType="void" signature="()" /><method name="isReleased " returnType="boolean" signature="()" /><method name="getLibVLC " returnType="ILibVLC" signature="()" /></methods><methodDetails><method name="retain" signature="" /><method name="release" signature="" /><method name="isReleased" signature="" /></methodDetails></page><page name="Package org.videolan.libvlc.stubs" source="org/videolan/libvlc/stubs/package-summary.html" /><page name="Class AndroidUtil" source="org/videolan/libvlc/util/AndroidUtil.html"><description>public class AndroidUtil</description><fields><field name="boolean" type="static" modifiers="public final">isROrLater</field><field name="boolean" type="static" modifiers="public final">isPOrLater</field><field name="boolean" type="static" modifiers="public final">isOOrLater</field><field name="boolean" type="static" modifiers="public final">isNougatMR1OrLater</field><field name="boolean" type="static" modifiers="public final">isNougatOrLater</field><field name="boolean" type="static" modifiers="public final">isMarshMallowOrLater</field><field name="boolean" type="static" modifiers="public final">isLolliPopOrLater</field><field name="boolean" type="static" modifiers="public final">isKitKatOrLater</field><field name="boolean" type="static" modifiers="public final">isJellyBeanMR2OrLater</field></fields><methods><method name="UriToFile " returnType="staticFile" signature="( Uri uri)" /><method name="PathToUri " returnType="staticUri" signature="( String path)">Quickly converts path to URIs, which are mandatory in libVLC.</method><method name="LocationToUri " returnType="staticUri" signature="( String location)" /><method name="FileToUri " returnType="staticUri" signature="( File file)" /><method name="resolveActivity " returnType="staticActivity" signature="( Context context)" /></methods><methodDetails><method name="UriToFile" signature="" /><method name="PathToUri" signature="">Quickly converts path to URIs, which are mandatory in libVLC.</method><method name="LocationToUri" signature="" /><method name="FileToUri" signature="" /></methodDetails></page><page name="Enum DisplayManager.DisplayType" source="org/videolan/libvlc/util/DisplayManager.DisplayType.html"><description>All Implemented Interfaces: java.io.Serializable , java.lang.Comparable public enum DisplayManager.DisplayType</description><methods><method name="values " returnType="staticArray&lt;DisplayManager.DisplayType&gt;" signature="()" /><method name="valueOf " returnType="staticDisplayManager.DisplayType" signature="( String name)" /></methods><methodDetails><method name="values" signature="" /></methodDetails></page><page name="Class DisplayManager.SecondaryDisplay" source="org/videolan/libvlc/util/DisplayManager.SecondaryDisplay.html"><description>All Implemented Interfaces: android.content.DialogInterface , android.view.KeyEvent.Callback , android.view.View.OnCreateContextMenuListener , android.view.Window.Callback public class DisplayManager.SecondaryDisplay extends Presentation</description><fields><field name="String" type="static" modifiers="public final">TAG</field></fields><methods><method name="getSurfaceFrame " returnType="FrameLayout" signature="()" /><method name="getSurfaceView " returnType="SurfaceView" signature="()" /><method name="getSubtitlesSurfaceView " returnType="SurfaceView" signature="()" /></methods><methodDetails><method name="getSurfaceFrame" signature="" /><method name="getSurfaceView" signature="" /></methodDetails></page><page name="Class DisplayManager" source="org/videolan/libvlc/util/DisplayManager.html"><description>public class DisplayManager</description><nestedClasses><nestedClass name="public class" type="public class">DisplayManager.SecondaryDisplay</nestedClass><nestedClass name="public enum" type="public enum">DisplayManager.DisplayType</nestedClass></nestedClasses><methods><method name="isPrimary " returnType="boolean" signature="()" /><method name="isSecondary " returnType="boolean" signature="()" /><method name="isOnRenderer " returnType="boolean" signature="()" /><method name="release " returnType="void" signature="()" /><method name="getPresentation " returnType="DisplayManager.SecondaryDisplay" signature="()" /><method name="getDisplayType " returnType="DisplayManager.DisplayType" signature="()" /><method name="setMediaRouterCallback " returnType="boolean" signature="()" /><method name="removeMediaRouterCallback " returnType="void" signature="()" /></methods><methodDetails><method name="isPrimary" signature="" /><method name="isSecondary" signature="" /><method name="isOnRenderer" signature="" /><method name="release" signature="" /><method name="getPresentation" signature="" /><method name="getDisplayType" signature="" /><method name="setMediaRouterCallback" signature="" /></methodDetails></page><page name="Interface Dumper.Listener" source="org/videolan/libvlc/util/Dumper.Listener.html"><description>public interface Dumper.Listener</description><methods><method name="onFinish " returnType="abstract void" signature="(boolean success)" /><method name="onProgress " returnType="abstract void" signature="(float progress)" /></methods><methodDetails><method name="onFinish" signature="" /></methodDetails></page><page name="Class Dumper" source="org/videolan/libvlc/util/Dumper.html"><description>public class Dumper</description><nestedClasses><nestedClass name="public interface" type="public interface">Dumper.Listener</nestedClass></nestedClasses><methods><method name="start " returnType="void" signature="()">Start to dump</method><method name="cancel " returnType="void" signature="()">Cancel the dump of the Uri.</method></methods><methodDetails><method name="start" signature="">Start to dump</method></methodDetails></page><page name="Class Extensions" source="org/videolan/libvlc/util/Extensions.html"><description>public class Extensions</description><fields><field name="&gt;" type="String" modifiers="public final static HashSet &lt;">VIDEO</field><field name="&gt;" type="String" modifiers="public final static HashSet &lt;">AUDIO</field><field name="&gt;" type="String" modifiers="public final static HashSet &lt;">SUBTITLES</field><field name="&gt;" type="String" modifiers="public final static HashSet &lt;">PLAYLIST</field></fields></page><page name="Enum HWDecoderUtil.AudioOutput" source="org/videolan/libvlc/util/HWDecoderUtil.AudioOutput.html"><description>All Implemented Interfaces: java.io.Serializable , java.lang.Comparable public enum HWDecoderUtil.AudioOutput</description><methods><method name="values " returnType="staticArray&lt;HWDecoderUtil.AudioOutput&gt;" signature="()" /><method name="valueOf " returnType="staticHWDecoderUtil.AudioOutput" signature="( String name)" /></methods><methodDetails><method name="values" signature="" /></methodDetails></page><page name="Enum HWDecoderUtil.Decoder" source="org/videolan/libvlc/util/HWDecoderUtil.Decoder.html"><description>All Implemented Interfaces: java.io.Serializable , java.lang.Comparable public enum HWDecoderUtil.Decoder</description><methods><method name="values " returnType="staticArray&lt;HWDecoderUtil.Decoder&gt;" signature="()" /><method name="valueOf " returnType="staticHWDecoderUtil.Decoder" signature="( String name)" /></methods><methodDetails><method name="values" signature="" /></methodDetails></page><page name="Class HWDecoderUtil" source="org/videolan/libvlc/util/HWDecoderUtil.html"><description>public class HWDecoderUtil Utility class that return the preferred hardware decoder from a list of known devices.</description><nestedClasses><nestedClass name="public enum" type="public enum">HWDecoderUtil.Decoder</nestedClass><nestedClass name="public enum" type="public enum">HWDecoderUtil.AudioOutput</nestedClass></nestedClasses><methods><method name="getDecoderFromDevice " returnType="staticHWDecoderUtil.Decoder" signature="()" /><method name="getAudioOutputFromDevice " returnType="staticHWDecoderUtil.AudioOutput" signature="()" /></methods><methodDetails><method name="getDecoderFromDevice" signature="" /></methodDetails></page><page name="Interface MediaBrowser.EventListener" source="org/videolan/libvlc/util/MediaBrowser.EventListener.html"><description>public interface MediaBrowser.EventListener Listener called when medias are added or removed.</description><methods><method name="onMediaAdded " returnType="abstract void" signature="(int index, IMedia media)">Received when a new media is added.</method><method name="onMediaRemoved " returnType="abstract void" signature="(int index, IMedia media)">Received when a media is removed (Happens only when you discover networks)</method><method name="onBrowseEnd " returnType="abstract void" signature="()">Called when browse ended.</method></methods><methodDetails><method name="onMediaAdded" signature="">Received when a new media is added.</method><method name="onMediaRemoved" signature="">Received when a media is removed (Happens only when you discover networks)</method></methodDetails></page><page name="Class MediaBrowser.Flag" source="org/videolan/libvlc/util/MediaBrowser.Flag.html"><description>public class MediaBrowser.Flag</description><fields><field name="int" type="static" modifiers="public final">Interact</field><field name="int" type="static" modifiers="public final">NoSlavesAutodetect</field><field name="int" type="static" modifiers="public final">ShowHiddenFiles</field></fields></page><page name="Class MediaBrowser" source="org/videolan/libvlc/util/MediaBrowser.html"><description>public class MediaBrowser</description><nestedClasses><nestedClass name="public class" type="public class">MediaBrowser.Flag</nestedClass><nestedClass name="public interface" type="public interface">MediaBrowser.EventListener</nestedClass></nestedClasses><methods><method name="release " returnType="void" signature="()">Release the MediaBrowser.</method><method name="changeEventListener " returnType="void" signature="( MediaBrowser.EventListener eventListener)">Reset this media browser and register a new EventListener</method><method name="discoverNetworkShares " returnType="void" signature="()">Discover all networks shares</method><method name="discoverNetworkShares " returnType="void" signature="( String serviceName)">Discover networks shares using a specified Discoverer</method><method name="browse " returnType="void" signature="( String path, int flags)">Browse to the specified local path starting with '/'.</method><method name="browse " returnType="void" signature="( Uri uri, int flags)">Browse to the specified uri.</method><method name="browse " returnType="void" signature="( IMedia media, int flags)">Browse to the specified media.</method><method name="getMediaCount " returnType="int" signature="()">Get the number or media.</method><method name="getMediaAt " returnType="IMedia" signature="(int index)">Get a media at a specified index.</method><method name="setIgnoreFileTypes " returnType="void" signature="( String list)">Override the extensions list to be ignored in browsingdefault is "db,nfo,ini,jpg,jpeg,ljpg,gif,png,pgm,pgmyuv,pbm,pam,tga,bmp,pnm,xpm,xcf,pcx,tif,tiff,lbm,sfv,txt,sub,idx,srt,cue,ssa"</method></methods><methodDetails><method name="release" signature="">Release the MediaBrowser.</method><method name="changeEventListener" signature="">Reset this media browser and register a new EventListener</method><method name="discoverNetworkShares" signature="">Discover all networks shares</method><method name="discoverNetworkShares" signature="">Discover networks shares using a specified Discoverer</method><method name="browse" signature="">Browse to the specified local path starting with '/'.</method><method name="browse" signature="">Browse to the specified uri.</method><method name="browse" signature="">Browse to the specified media.</method><method name="getMediaCount" signature="">Get the number or media.</method><method name="getMediaAt" signature="">Get a media at a specified index. Should be released with release .</method></methodDetails></page><page name="Class VLCUtil.MachineSpecs" source="org/videolan/libvlc/util/VLCUtil.MachineSpecs.html"><description>public class VLCUtil.MachineSpecs</description><fields><field name="boolean" type="public" modifiers="">hasNeon</field><field name="boolean" type="public" modifiers="">hasFpu</field><field name="boolean" type="public" modifiers="">hasArmV6</field><field name="boolean" type="public" modifiers="">hasArmV7</field><field name="boolean" type="public" modifiers="">hasMips</field><field name="boolean" type="public" modifiers="">hasX86</field><field name="boolean" type="public" modifiers="">is64bits</field><field name="float" type="public" modifiers="">bogoMIPS</field><field name="int" type="public" modifiers="">processors</field><field name="float" type="public" modifiers="">frequency</field></fields></page><page name="Class VLCUtil" source="org/videolan/libvlc/util/VLCUtil.html"><description>public class VLCUtil</description><nestedClasses><nestedClass name="public class" type="public class">VLCUtil.MachineSpecs</nestedClass></nestedClasses><fields><field name="String" type="static" modifiers="public final">TAG</field><field name="String" type="static" modifiers="private">errorMsg</field><field name="VLCUtil.MachineSpecs" type="static" modifiers="private">machineSpecs</field></fields><methods><method name="getErrorMsg " returnType="staticString" signature="()" /><method name="getMachineSpecs " returnType="staticVLCUtil.MachineSpecs" signature="()" /><method name="getABIList21 " returnType="staticArray&lt;String&gt;" signature="()" /><method name="getABIList " returnType="staticArray&lt;String&gt;" signature="()" /><method name="hasCompatibleCPU " returnType="static boolean" signature="( Context context)" /><method name="UriFromMrl " returnType="staticUri" signature="( String mrl)">VLC authorize only "-._~" in Mrl format, android Uri authorize "_-!.~'()*".Therefore, decode the characters authorized by Android Uri when creating an Uri from VLC.</method><method name="encodeVLCUri " returnType="staticString" signature="(@ NonNull () Uri uri)" /><method name="encodeVLCString " returnType="staticString" signature="(@ NonNull () String mrl)">VLC only acccepts "-._~" in Mrl format, android Uri accepts "_-!.~'()*".Therefore, encode the characters authorized by Android Uri when creating a mrl from an Uri.</method></methods><methodDetails><method name="getErrorMsg" signature="" /><method name="getMachineSpecs" signature="" /><method name="getABIList21" signature="" /><method name="getABIList" signature="" /><method name="hasCompatibleCPU" signature="" /><method name="UriFromMrl" signature="">VLC authorize only "-._~" in Mrl format, android Uri authorize "_-!.~'()*".Therefore, decode the characters authorized by Android Uri when creating an Uri from VLC.</method><method name="encodeVLCUri" signature="" /></methodDetails></page><page name="Class VLCVideoLayout" source="org/videolan/libvlc/util/VLCVideoLayout.html"><description>All Implemented Interfaces: android.graphics.drawable.Drawable.Callback , android.view.KeyEvent.Callback , android.view.ViewManager , android.view.ViewParent , android.view.accessibility.AccessibilityEventSource public class VLCVideoLayout extends FrameLayout VLC-ready layout which includes 2 SurfaceView (video+subtitles) and 1 TextureView All these surfaces are stubs, only the relevant one(s) will be inflated Use it preferably with MediaPlayer .attachViews()</description><methods /></page><page name="Package org.videolan.libvlc.util" source="org/videolan/libvlc/util/package-summary.html" /></documentation>